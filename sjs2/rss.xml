<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>Scala.js</title>
        <description>Scala.js - </description>
        <link>http://www.scala-js.org</link>
        <link>http://www.scala-js.org</link>
        <lastBuildDate>2015-11-17T22:09:04+02:00</lastBuildDate>
        <pubDate>2015-11-17T22:09:04+02:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Announcing Scala.js 0.6.5</title>
                <description>&lt;p&gt;We are thrilled to announce the release of Scala.js 0.6.5!&lt;/p&gt;

&lt;p&gt;This is probably &lt;em&gt;the most important release since Scala.js 0.5.0&lt;/em&gt;!
It brings significant advances to interoperability with JavaScript:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can now implement subclasses of JavaScript classes and traits in Scala.js!&lt;/li&gt;
  &lt;li&gt;Using the same semantics, you can now define object literals with &lt;code&gt;new js.Object { val x = 5 }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;There is a new unboxed pseudo-union type &lt;code&gt;A | B&lt;/code&gt; to more accurately type your JavaScript facades&lt;/li&gt;
  &lt;li&gt;You can statically typecheck that the &lt;code&gt;@JSExport&lt;/code&gt;s of a Scala class comply with a JavaScript facade trait with &lt;code&gt;js.use(x).as[T]&lt;/code&gt;
&lt;!--more--&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/doc/tutorial.html&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.5 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.5 without change.
However, it is not forward compatible: libraries compiled with 0.6.5 cannot be used by projects using 0.6.{0-4}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;important-new-warnings&quot;&gt;Important new warnings&lt;/h2&gt;

&lt;p&gt;When upgrading from 0.6.{0-4}, you will get new warnings on the declarations of your facade types, i.e., traits, classes and objects extending &lt;code&gt;js.Any&lt;/code&gt;.
For example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;will have the following warning:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Foo.scala:3: warning: Classes, traits and objects inheriting from js.Any should be annotated
  with @js.native, unless they have @ScalaJSDefined.
  The default will switch to Scala.js-defined in the next major version of Scala.js.
class Foo extends js.Object
      ^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the text says, you should simply add the &lt;code&gt;@js.native&lt;/code&gt; annotation to the declaration of &lt;code&gt;Foo&lt;/code&gt; to silence the warning:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Addressing these warnings is important to make your source code forward compatible with the next major version of Scala.js.
An unannotated declaration extending &lt;code&gt;js.Any&lt;/code&gt; will by default be Scala.js-defined (see next section) in the next version.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;h3 id=&quot;scalajs-defined-js-classes-objects-and-traits&quot;&gt;Scala.js-defined JS classes, objects, and traits&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.5 introduces a major language improvement: the ability to define, in Scala.js, a subclass of a native JavaScript class (or implementing a JavaScript trait/interface).
We call such classes &lt;em&gt;Scala.js-defined JS classes&lt;/em&gt;, because they are effectively JavaScript classes, but written in Scala.js; whereas classes that you typically write are Scala classes, not JavaScript classes.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.annotation._&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that the body of &lt;code&gt;bar()&lt;/code&gt; is implemented in Scala.js, instead of being &lt;code&gt;= js.native&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A Scala.js-defined JS class is not a facade type to a JavaScript library.
Instead, it is fully implemented in Scala.js.
Unlike Scala classes, which require exports, all members of Scala.js-defined JS classes are automatically visible from JavaScript code.
The class itself is not automatically visible; if you want it to be, you can &lt;code&gt;@JSExport&lt;/code&gt; it.
You can also use &lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.5/#scala.scalajs.js.package@constructorOf[T&amp;lt;:scala.scalajs.js.Any]:scala.scalajs.js.Dynamic&quot;&gt;&lt;code&gt;js.constructorOf[C]&lt;/code&gt;&lt;/a&gt; to obtain the JS constructor function and pass it to a JavaScript library.&lt;/p&gt;

&lt;p&gt;Scala.js-defined JS classes have JavaScript semantics instead of Scala semantics.
You can read more about that in &lt;a href=&quot;/doc/sjs-defined-js-classes.html&quot;&gt;the documentation&lt;/a&gt;.
Most importantly, that means overloading dispatch is done at run-time instead of compile-time.&lt;/p&gt;

&lt;p&gt;You can also declare Scala.js-defined JS &lt;code&gt;object&lt;/code&gt;s as singletons, just like &lt;code&gt;object&lt;/code&gt;s in Scala.&lt;/p&gt;

&lt;h4 id=&quot;traits&quot;&gt;Traits&lt;/h4&gt;

&lt;p&gt;Scala.js-defined JS traits are restricted: they cannot declare any concrete term member, i.e., all their &lt;code&gt;val&lt;/code&gt;s, &lt;code&gt;var&lt;/code&gt;s and &lt;code&gt;def&lt;/code&gt;s must be abstract.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.annotation._&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// ok
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// illegal
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// ok
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// illegal
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Scala.js-defined JS classes, objects and traits cannot directly extend native JS traits (i.e., non-Scala.js-defined JS traits).&lt;/p&gt;

&lt;h4 id=&quot;anonymous-classes-and-object-literals&quot;&gt;Anonymous classes and object literals&lt;/h4&gt;

&lt;p&gt;Anonymous classes extending a JS class and/or trait are automatically Scala.js-defined.
Combined with Scala.js-defined JS traits, this is very useful to write typechecked object literals with Scala syntax:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.annotation._&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@ScalaJSDefined&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Position&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In previous versions, &lt;code&gt;obj&lt;/code&gt; would have been written with a non-typechecked &lt;code&gt;js.Dynamic.literal&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Dynamic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;pseudo-union-type-a--b&quot;&gt;Pseudo-union type &lt;code&gt;A | B&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Many JavaScript libraries have APIs with parameters or values that accept different types of values.
To be able to accurately type those libraries, Scala.js 0.6.5 features an unboxed, facade-friendly pseudo-union type &lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.5/#scala.scalajs.js.$bar&quot;&gt;&lt;code&gt;A | B&lt;/code&gt;&lt;/a&gt;.
Here are a couple of examples of what it can do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyVal&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;merge&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// the following examples do not compile
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;See &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.5/test-suite/src/test/scala/org/scalajs/testsuite/library/UnionTypeTest.scala&quot;&gt;the complete test cases&lt;/a&gt; to get the complete picture.&lt;/p&gt;

&lt;h3 id=&quot;jsusexast-statically-typecheck-your-exports&quot;&gt;&lt;code&gt;js.use(x).as[T]&lt;/code&gt;: statically typecheck your exports&lt;/h3&gt;

&lt;p&gt;Sometimes, you &lt;code&gt;@JSExport&lt;/code&gt; members of your Scala classes so that they comply with some JavaScript interface, for example to pass it to a JavaScript library expecting some fields and methods on your object.
In 0.6.4 and before, you needed to take care yourself of exporting everything that was required, and then probably do a hard-cast:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeInterface&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SomeLibrary&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;SomeInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterfaceImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SomeLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterfaceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asInstanceOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SomeInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you mess up your exports, you will have trouble at run-time.&lt;/p&gt;

&lt;p&gt;In 0.6.5, you can write the following instead:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;SomeLibrary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InterfaceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;SomeInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unlike &lt;code&gt;x.asInstanceOf[T]&lt;/code&gt;, the &lt;code&gt;js.use(x).as[T]&lt;/code&gt; idiom &lt;em&gt;statically typechecks&lt;/em&gt; that you have all the exports required to comply to the JavaScript interface.&lt;/p&gt;

&lt;h3 id=&quot;java-library-additions&quot;&gt;Java library additions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;The complete set of &lt;code&gt;Character.isXYZ&lt;/code&gt; methods (to test Unicode properties of characters)&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.lang.Math.rint(Double)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.concurrent.ThreadLocalRandom&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.TreeSet&lt;/code&gt; and &lt;code&gt;java.util.NavigableSet&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1818&quot;&gt;#1818&lt;/a&gt; Performance bottleneck in one of the steps of the linker (fast- and fullOptJS)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1759&quot;&gt;#1759&lt;/a&gt; &lt;code&gt;new Int8Array(n).toArray&lt;/code&gt; throws &lt;code&gt;TypeError&lt;/code&gt; (second run)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1790&quot;&gt;#1790&lt;/a&gt; Compiler crash with a dash in a parameter of a lambda&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1799&quot;&gt;#1799&lt;/a&gt; &lt;code&gt;java.lang.Iterable&lt;/code&gt; is incorrectly in &lt;code&gt;java.util&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1819&quot;&gt;#1819&lt;/a&gt; &lt;code&gt;Double&lt;/code&gt; doesn’t match &lt;code&gt;Float&lt;/code&gt; even with non-strict floats&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1836&quot;&gt;#1836&lt;/a&gt; &lt;code&gt;BigInteger.ONE.gcd(x)&lt;/code&gt; loops forever&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1857&quot;&gt;#1857&lt;/a&gt; &lt;code&gt;j.l.Math.{abs,min,max}&lt;/code&gt; do not handle correctly &lt;code&gt;-0.0&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1777&quot;&gt;#1777&lt;/a&gt; Bug with &lt;code&gt;java.util.LinkedList.size&lt;/code&gt; when larger than &lt;code&gt;Int.MaxValue&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.5+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
                <link>http://www.scala-js.org/news/2015/08/31/announcing-scalajs-0.6.5/</link>
                <guid>http://www.scala-js.org/news/2015/08/31/announcing-scalajs-0.6.5</guid>
                <pubDate>2015-08-31T00:00:00+03:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.4</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.6.4!&lt;/p&gt;

&lt;p&gt;This release brings support for Scala 2.11.7 and 2.12.0-M1, as well as a significant part of the Java collections library in &lt;code&gt;java.util&lt;/code&gt;, thanks to &lt;a href=&quot;https://github.com/andreaTP&quot;&gt;@andreaTP&lt;/a&gt; and &lt;a href=&quot;https://github.com/nicolasstucki&quot;&gt;@nicolasstucki&lt;/a&gt;.
It also fixes numerous bugs.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/doc/tutorial.html&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.4 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.4 without change.
However, it is not forward compatible: libraries compiled with 0.6.4 cannot be used by projects using 0.6.{0-3}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;potential-breaking-changes&quot;&gt;Potential breaking changes&lt;/h2&gt;

&lt;p&gt;The bug fix for &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1705&quot;&gt;#1705&lt;/a&gt; in this release is potentially a breaking change that might affect your code silently.
If you had something like this in a facade type:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@JSName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b_=&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a_=&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;the last line would previously (erroneously) translate to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This releases fixes the compiler to instead translate to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;JS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;b_=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you relied on the former code to be emitted, you should change the &lt;code&gt;@JSName&lt;/code&gt; annotation as &lt;code&gt;@JSName(&quot;b&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is no deprecation period because there was no way to, at the same time, warn against problems, and still allow correct new code to be warning-free, unfortunately.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;h3 id=&quot;java-collections-api&quot;&gt;Java Collections API&lt;/h3&gt;

&lt;p&gt;Some Scala libraries use the collections of Java in some cases.
To help port these libraries to Scala.js, a number of collection types have been ported.
At the moment, the following data structures are supported:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;List&lt;/code&gt;: &lt;code&gt;ArrayList&lt;/code&gt;, &lt;code&gt;LinkedList&lt;/code&gt;, &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Set&lt;/code&gt;: &lt;code&gt;HashSet&lt;/code&gt;, &lt;code&gt;LinkedHashSet&lt;/code&gt;, &lt;code&gt;ConcurrentSkipListSet&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Map&lt;/code&gt;: &lt;code&gt;HashMap&lt;/code&gt;, &lt;code&gt;LinkedHashMap&lt;/code&gt;, &lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Queue&lt;/code&gt;: &lt;code&gt;LinkedList&lt;/code&gt;, &lt;code&gt;ConcurrentLinkedQueue&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;as well as the helper classes &lt;code&gt;Arrays&lt;/code&gt; and &lt;code&gt;Collections&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;better-and-earlier-diagnostics-for-illegal-jsexports-and-facade-types&quot;&gt;Better and earlier diagnostics for illegal &lt;code&gt;@JSExport&lt;/code&gt;s and facade types&lt;/h3&gt;

&lt;p&gt;There were a number of illegal usages of &lt;code&gt;@JSExport&lt;/code&gt; and facade types that were not detected by the compiler.
Using those would previously result in crashes of the linker or production of completely wrong .js code.
See tickets &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1647&quot;&gt;#1647&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1664&quot;&gt;#1664&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1704&quot;&gt;#1704&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1706&quot;&gt;#1706&lt;/a&gt;, &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1707&quot;&gt;#1707&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1717&quot;&gt;#1717&lt;/a&gt; for details.&lt;/p&gt;

&lt;h3 id=&quot;running-with-rhino-also-reports-linking-errors&quot;&gt;Running with Rhino also reports linking errors&lt;/h3&gt;

&lt;p&gt;Until 0.6.3, running with Rhino (the default) would not truly link, and therefore would not report linking errors.
This caused confusions in several occasions, because code that appeared to work on Rhino refused to link and therefore &lt;code&gt;fastOptJS&lt;/code&gt; would not work.
As of 0.6.4, even running with Rhino will report linking errors.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1646&quot;&gt;#1646&lt;/a&gt; &lt;code&gt;Char#isUpper&lt;/code&gt; behavior diverges between Scala.js/Scala-JVM&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1664&quot;&gt;#1664&lt;/a&gt; &lt;code&gt;@JSName(variable)&lt;/code&gt; annotation does not fail on objects and classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1671&quot;&gt;#1671&lt;/a&gt; &lt;code&gt;Double.toInt&lt;/code&gt; and &lt;code&gt;Float.toInt&lt;/code&gt; are broken&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1718&quot;&gt;#1718&lt;/a&gt; &lt;code&gt;Pattern.compile&lt;/code&gt; doesn’t validate regex&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1722&quot;&gt;#1722&lt;/a&gt; Rhino crash with Scalatest&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1733&quot;&gt;#1733&lt;/a&gt; &lt;code&gt;@JSName&lt;/code&gt; does not work for &lt;code&gt;val&lt;/code&gt;s and &lt;code&gt;var&lt;/code&gt;s&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1734&quot;&gt;#1734&lt;/a&gt; Charset decoding fails with read-only byte buffers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1743&quot;&gt;#1743&lt;/a&gt; &lt;code&gt;js.Dynamic.literal.applyDynamic(&quot;apply&quot;)(map.toSeq: _*)&lt;/code&gt; causes optimizer to crash&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1748&quot;&gt;#1748&lt;/a&gt; Source root not found for shared project error (&lt;code&gt;CrossProject&lt;/code&gt; friendlier to Scoverage)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1759&quot;&gt;#1759&lt;/a&gt; &lt;code&gt;new Int8Array(n).toArray&lt;/code&gt; throws TypeError&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1764&quot;&gt;#1764&lt;/a&gt; &lt;code&gt;BigInteger.modInverse&lt;/code&gt; always throws an exception&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1774&quot;&gt;#1774&lt;/a&gt; &lt;code&gt;ClassCastException&lt;/code&gt;: &lt;code&gt;org.mozilla.javascript.UniqueTag&lt;/code&gt; running Scala.js project&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1781&quot;&gt;#1781&lt;/a&gt; When the optimizer crashes, it is left in an inconsistent state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.4+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
                <link>http://www.scala-js.org/news/2015/07/03/announcing-scalajs-0.6.4/</link>
                <guid>http://www.scala-js.org/news/2015/07/03/announcing-scalajs-0.6.4</guid>
                <pubDate>2015-07-03T00:00:00+03:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.3</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.6.3!&lt;/p&gt;

&lt;p&gt;A lot has happened in this release, probably because we dragged it for a longer amount of time than usual (2 months since the last release!).
Besides the usual bag of bug fixes, there are three highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support for &lt;code&gt;BigInteger&lt;/code&gt; and &lt;code&gt;BigDecimal&lt;/code&gt;, thanks to an incredible amount of work by &lt;a href=&quot;https://github.com/InTheNow&quot;&gt;@InTheNow&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Extension of &lt;code&gt;jsDependencies&lt;/code&gt; to specify minified versions of the JS libraries.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Experimental&lt;/em&gt; output modes to target ECMAScript 6, as well as &lt;a href=&quot;https://developers.google.com/v8/experiments&quot;&gt;Strong Mode&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We also welcome Nicolas Stucki aka &lt;a href=&quot;https://github.com/nicolasstucki&quot;&gt;@nicolasstucki&lt;/a&gt; to the core team at EPFL.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/doc/tutorial.html&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.3 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.3 without change.
However, it is not forward compatible: libraries compiled with 0.6.3 cannot be used by projects using 0.6.{0-2}.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;h3 id=&quot;big-numbers-are-here&quot;&gt;Big numbers are here!&lt;/h3&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/InTheNow&quot;&gt;@InTheNow&lt;/a&gt;, &lt;code&gt;java.math.BigInteger&lt;/code&gt; and &lt;code&gt;java.math.BigDecimal&lt;/code&gt; are finally supported by Scala.js.
Consequently, so are &lt;code&gt;scala.math.BigInt&lt;/code&gt; and &lt;code&gt;scala.math.BigDecimal&lt;/code&gt;, as well as ranges of &lt;code&gt;Double&lt;/code&gt;s.&lt;/p&gt;

&lt;h3 id=&quot;minified-versions-of-js-dependencies&quot;&gt;Minified versions of JS dependencies&lt;/h3&gt;

&lt;p&gt;The new &lt;code&gt;minified&lt;/code&gt; modifier to &lt;code&gt;jsDependencies&lt;/code&gt; allows to specify minified alternatives of JS libraries.
Use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsDependencies +=
  &quot;org.webjars&quot; % &quot;immutable&quot; % &quot;3.4.0&quot; / &quot;immutable.js&quot; minified &quot;immutable.min.js&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Minified dependencies are packaged with &lt;code&gt;packageMinifiedJSDependencies&lt;/code&gt;, which is automatically called when &lt;code&gt;fullOptJS&lt;/code&gt; is invoked.
The result is put in a file &lt;code&gt;-jsdeps.min.js&lt;/code&gt; next to &lt;code&gt;-jsdeps.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Obviously, for JS dependencies that do not specify a minified version, their non-minified version is used instead.&lt;/p&gt;

&lt;h3 id=&quot;opt-in-silent-fail-for-jsexportdescendentclassesobjects&quot;&gt;Opt-in silent fail for &lt;code&gt;@JSExportDescendent{Classes,Objects}&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Only public top-level classes and objects can be &lt;code&gt;@JSExport&lt;/code&gt;ed.
Trying to export a non-public or inner entity does not compile.
For directly applied &lt;code&gt;@JSExport&lt;/code&gt;, this is the expected behavior.
For &lt;code&gt;@JSExportDescendentClasses&lt;/code&gt; and &lt;code&gt;@JSExportDescendentObjects&lt;/code&gt;, however, it can prevent certain useful patterns.
In some cases it is preferable to simply ignore descendent classes and objects that cannot be exported, rather than failing with a compile error.&lt;/p&gt;

&lt;p&gt;These two annotations now take an additional, optional parameter &lt;code&gt;ignoreInvalidDescendants&lt;/code&gt; of type &lt;code&gt;Boolean&lt;/code&gt;.
If &lt;code&gt;true&lt;/code&gt;, invalid descendent classes and objects will be ignored for exports.&lt;/p&gt;

&lt;p&gt;For example, this does not compile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExportDescendentClasses&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InvalidExport&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we change the definition of &lt;code&gt;Foo&lt;/code&gt; to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@JSExportDescendentClasses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ignoreInvalidDescendants&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then it will compile and &lt;code&gt;InvalidExport&lt;/code&gt; will be silently ignored.&lt;/p&gt;

&lt;h3 id=&quot;emit-ecmascript-6&quot;&gt;Emit ECMAScript 6&lt;/h3&gt;

&lt;p&gt;Now that ECMAScript 6 has reached the status of Release Candidate, it is time for Scala.js to offer the possibility to emit JavaScript code taking full advantage of its features.
You can do so with the following sbt setting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scalaJSOutputMode := org.scalajs.core.tools.javascript.OutputMode.ECMAScript6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will cause the &lt;code&gt;fastOptJS&lt;/code&gt; task (after a &lt;code&gt;clean&lt;/code&gt;) to emit ES6-style code.
Among others, the following features are used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Classes&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;...rest&lt;/code&gt; parameters&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Currently, very few runtimes support enough of ECMAScript 6 to be able to run the Scala.js output.
To the best of our knowledge, V8 4.2.71 minimum is required, with the feature flag &lt;code&gt;--harmony-rest-parameters&lt;/code&gt;.
This runtime is available in &lt;a href=&quot;https://iojs.org/&quot;&gt;iojs&lt;/a&gt; &amp;gt;= 2.0.0, as well as in &lt;a href=&quot;https://www.google.fr/chrome/browser/canary.html&quot;&gt;Chrome Canary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can use io.js with the &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; commands of sbt with the following sbt settings:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postLinkJSEnv := NodeJSEnv(executable = &quot;iojs&quot;, args = Seq(&quot;--harmony-rest-parameters&quot;)).value
scalaJSStage := FastOptStage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Caveats:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Only &lt;code&gt;fastOpt&lt;/code&gt; works. &lt;code&gt;fullOpt&lt;/code&gt; will break with crashes or obscure errors, do not use it.&lt;/li&gt;
  &lt;li&gt;Runtime performance is &lt;em&gt;awful&lt;/em&gt;. Benchmarks have shown degradations up to 10x slower than the normal output.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Consequence:&lt;/strong&gt; This is currently a toy, an experiment, and should not be used in production.&lt;/p&gt;

&lt;h3 id=&quot;ecmascript-6-strong-mode&quot;&gt;ECMAScript 6 Strong Mode&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://developers.google.com/v8/experiments&quot;&gt;Strong Mode&lt;/a&gt; is an experiment conducted by the V8 team.
Their website will explain better than we can, but basically it is an extension to JS’ strict mode, which further restricts what programs are valid.
It is meant to define a subset of JavaScript that can be optimized more predictably by runtimes, and which also causes less surprises to developers.
Contrary to &lt;a href=&quot;http://asmjs.org/&quot;&gt;asm.js&lt;/a&gt;, it is still meant to be written by hand.&lt;/p&gt;

&lt;p&gt;Early experiments show that Strong Mode can be an excellent target for Scala.js, because their semantics and restrictions align in many ways.
We have therefore invested time in providing a Strong Mode-compliant output to Scala.js.
Similarly to the ECMAScript 6 output, it can be activated with an sbt setting:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scalaJSOutputMode := org.scalajs.core.tools.javascript.OutputMode.ECMAScript6StrongMode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since Strong Mode is a subset of ECMAScript 6, any runtime which supports ES6 can also run Strong Mode code.
But to enable the additional checks, you have to use the &lt;code&gt;--strong-mode&lt;/code&gt; argument to V8.
Using io.js, this can be done with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postLinkJSEnv := NodeJSEnv(executable = &quot;iojs&quot;, args = Seq(&quot;--harmony-rest-parameters&quot;, &quot;--strong-mode&quot;)).value
scalaJSStage := FastOptStage
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same caveats as the ES6 mode apply.&lt;/p&gt;

&lt;p&gt;Scala.js is an excellent platform for experimenting with Strong Mode, as we can easily generate huge amounts of Strong Mode-compliant code just by recompiling applications in this mode.
Since Strong Mode is still in flux, we are discussing with the V8 team to make it as good as it can be, for JavaScript developers at large as well as for Scala.js and compiler writers specifically.&lt;/p&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;p&gt;Among others, the following bugs have been fixed:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1490&quot;&gt;#1490&lt;/a&gt; JVM style module initialization under semantic flag&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1512&quot;&gt;#1512&lt;/a&gt; Atomic write of &lt;code&gt;-fastopt.js&lt;/code&gt; and &lt;code&gt;-opt.js&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1556&quot;&gt;#1556&lt;/a&gt; Test adapter provisions slaves too aggressively&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1560&quot;&gt;#1560&lt;/a&gt; &lt;code&gt;java.io.StringReader.read(c:Array[Char],offset:Int,len:Int)&lt;/code&gt; returns 0 at eof, instead of -1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1564&quot;&gt;#1564&lt;/a&gt; Allow overriding path prefixes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1569&quot;&gt;#1569&lt;/a&gt; AssertionError when crossProject is used as a ProjectRef in another project&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1578&quot;&gt;#1578&lt;/a&gt; Report the full stack trace for exceptions thrown in Futures&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1582&quot;&gt;#1582&lt;/a&gt; Parsing hexadecimal Long that has 0x80000000 bit set fails&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1589&quot;&gt;#1589&lt;/a&gt; Switch statement with &lt;code&gt;if&lt;/code&gt; causes compiler to fail&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1556&quot;&gt;#1556&lt;/a&gt; Test adapter provisions slaves too aggressively&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1625&quot;&gt;#1625&lt;/a&gt; Emit warning if &lt;code&gt;js.Dynamic.literal&lt;/code&gt; has duplicate keys (and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1595&quot;&gt;#1595&lt;/a&gt; not emit illegal JS in that situation)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the full list &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.3+is%3Aclosed&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
                <link>http://www.scala-js.org/news/2015/05/12/announcing-scalajs-0.6.3/</link>
                <guid>http://www.scala-js.org/news/2015/05/12/announcing-scalajs-0.6.3</guid>
                <pubDate>2015-05-12T00:00:00+03:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.2</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.6.2!&lt;/p&gt;

&lt;p&gt;This release mostly contains bug fixes, among which the lack of support of &lt;code&gt;java.net.URI&lt;/code&gt; for Unicode characters.
It also brings code size reduction and performance improvements to fastOpt code (although nothing changes in fullOpt).&lt;/p&gt;

&lt;p&gt;We are also happy to share that Scala.js is now part of &lt;a href=&quot;https://github.com/scala/community-builds&quot;&gt;Scala’s community build&lt;/a&gt;.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/doc/tutorial.html&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.2 is backward source and binary compatible with previous releases in the 0.6.x series.
Libraries compiled with earlier versions can be used with 0.6.2 without change.&lt;/p&gt;

&lt;p&gt;We would like to remind you that libraries compiled with 0.6.0 will suffer from &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1506&quot;&gt;bug #1506&lt;/a&gt;, which will cause &lt;code&gt;fastOptJS&lt;/code&gt; in dependent projects to perform more work than necessary.
It is therefore recommended for library authors to upgrade to Scala.js &amp;gt;= 0.6.1 and publish new versions of their libraries, if they haven’t done so yet.
Scala.js 0.6.0 can read binaries compiled with 0.6.1 and 0.6.2, so you need not be afraid to force an upgrade of all the users of your libraries.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/1535&quot;&gt;A better translation to JavaScript&lt;/a&gt; reduces the size of the &lt;code&gt;-fastopt.js&lt;/code&gt; files by a few percent, and speeds up their execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1520&quot;&gt;#1520&lt;/a&gt; &lt;code&gt;java.net.URI&lt;/code&gt; does not support Unicode&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1521&quot;&gt;#1521&lt;/a&gt; &lt;code&gt;new java.net.URI(&quot;#foo&quot;).getSchemeSpecificPart()&lt;/code&gt; should return the empty String&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1532&quot;&gt;#1532&lt;/a&gt; &lt;code&gt;TypedArrayByteBuffer.asDoubleBuffer&lt;/code&gt; results in a “RangeError: Invalid typed array length”&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1546&quot;&gt;#1546&lt;/a&gt; Error “Node.js isn’t connected” when running on Travis (tentative fix)&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2015/03/16/announcing-scalajs-0.6.2/</link>
                <guid>http://www.scala-js.org/news/2015/03/16/announcing-scalajs-0.6.2</guid>
                <pubDate>2015-03-16T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.1</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.6.1!&lt;/p&gt;

&lt;p&gt;This release mostly contains bug fixes, including inefficiencies in the incremental &lt;code&gt;fastOptJS&lt;/code&gt;.
It also brings the entire &lt;code&gt;java.nio.Buffer&lt;/code&gt;s API, with interoperability with the JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;Typed Arrays&lt;/a&gt; API.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/doc/tutorial.html&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;For changes in the 0.6.x series compared to 0.5.x, read &lt;a href=&quot;/news/2015/02/05/announcing-scalajs-0.6.0/&quot;&gt;the announcement of 0.6.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a minor release, 0.6.1 is backward source and binary compatible with 0.6.0.
Libraries compiled with 0.6.0 can be used with 0.6.1 without change.
However, they will suffer from &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1506&quot;&gt;bug #1506&lt;/a&gt;, which will cause your &lt;code&gt;fastOptJS&lt;/code&gt; to perform more work than necessary.
It is therefore recommended for library authors to upgrade to 0.6.1 and publish new versions of their libraries.
Scala.js 0.6.0 can read binaries compiled with 0.6.1, so you need not be afraid to force an upgrade of all the users of your libraries.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;javaniobuffer-and-typed-arrays&quot;&gt;java.nio.Buffer and Typed Arrays&lt;/h2&gt;

&lt;p&gt;Scala.js 0.6.1 brings a complete implementation of the &lt;code&gt;java.nio.Buffer&lt;/code&gt; API, with the exception of &lt;code&gt;MappedByteBuffer&lt;/code&gt;.
The non-&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#direct&quot;&gt;direct&lt;/a&gt; buffers work on any JS engine supported by Scala.js, i.e., supporting ECMAScript 5.1.&lt;/p&gt;

&lt;p&gt;Direct buffers are implemented with JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;Typed Arrays&lt;/a&gt;, and therefore require the JS VM to support them.
Two additional APIs of the Scala.js standard library provide interoperability with Typed Arrays:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.1/#scala.scalajs.js.typedarray.TypedArrayBufferOps&quot;&gt;TypedArrayBufferOps&lt;/a&gt; allows to retrieve the underlying &lt;code&gt;ArrayBuffer&lt;/code&gt;, &lt;code&gt;DataView&lt;/code&gt;, and optionally &lt;code&gt;TypedArray&lt;/code&gt; of a direct buffer (if it is not read-only)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.1/#scala.scalajs.js.typedarray.TypedArrayBuffer$&quot;&gt;TypedArrayBuffer&lt;/a&gt; allows to construct direct buffers wrapping existing Typed Arrays.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;improvements&quot;&gt;Improvements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/1488&quot;&gt;Better dce&lt;/a&gt; reduces the size of the generated .js files by a few percents.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/pull/1508&quot;&gt;java.util.Random&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/pull/1511&quot;&gt;j.l.Math.random()&lt;/a&gt; have been optimized. The latter is now an (inlined) direct forwarder to &lt;code&gt;js.Math.random()&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Running tests should be faster thanks to &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1299&quot;&gt;launching JS VMs in advance&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1496&quot;&gt;#1496&lt;/a&gt; Partial relative paths can now be used in &lt;code&gt;jsDependencies&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;bug-fixes&quot;&gt;Bug fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1478&quot;&gt;#1478&lt;/a&gt; Wrong optimization of Float/Double * -1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1491&quot;&gt;#1491&lt;/a&gt; &lt;code&gt;~fastOptJS&lt;/code&gt; runs non-stop (also reported as &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1513&quot;&gt;#1513&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1506&quot;&gt;#1506&lt;/a&gt;/&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1514&quot;&gt;#1514&lt;/a&gt; &lt;code&gt;fastOptJS&lt;/code&gt; performs unnecessary work (requires libraries to be recompiled with 0.6.1)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1497&quot;&gt;#1497&lt;/a&gt; A better error message when trying to &lt;code&gt;@JSExport&lt;/code&gt; an abstract class&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1499&quot;&gt;#1499&lt;/a&gt; &lt;code&gt;fullOptJS&lt;/code&gt; doesn’t generate the &lt;code&gt;-launcher.js&lt;/code&gt; script&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1515&quot;&gt;#1515&lt;/a&gt; Hidden crasher bug of the optimizer in obscure cases&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2015/03/03/announcing-scalajs-0.6.1/</link>
                <guid>http://www.scala-js.org/news/2015/03/03/announcing-scalajs-0.6.1</guid>
                <pubDate>2015-03-03T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.0</title>
                <description>&lt;p&gt;We are thrilled to announce the final release of Scala.js 0.6.0!&lt;/p&gt;

&lt;p&gt;As of this version, we do not consider Scala.js to be experimental anymore.
We believe it has reached maturity, and from now on, the language semantics as well as the APIs will only evolve in backward compatible ways, or go through proper deprecation cycles.&lt;/p&gt;

&lt;p&gt;Today is also the 2-year anniversary of Scala.js!
The &lt;a href=&quot;https://github.com/scala-js/scala-js/commit/9ad7627c2418e5d345375705ca087a60e3aa2c22&quot;&gt;first commit&lt;/a&gt; was pushed on February 5, 2013.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;If you are new to Scala.js, head over to
&lt;a href=&quot;/doc/tutorial.html&quot;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;release-notes&quot;&gt;Release notes&lt;/h2&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0 to be compatible.
More importantly, this release is not source compatible with 0.5.x either.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries have already been upgraded and published for 0.6.0:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: &lt;code&gt;&quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;scalarx&quot; % &quot;0.2.7&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;upickle&quot; % &quot;0.2.6&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;autowire&quot; % &quot;0.2.4&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jokade/scalajs-angulate&quot;&gt;scalajs-angulate&lt;/a&gt;: &lt;code&gt;&quot;biz.enef&quot; %%% &quot;scalajs-angulate&quot; % &quot;0.1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/greencatsoft/scalajs-angular&quot;&gt;scalajs-angular&lt;/a&gt;: &lt;code&gt;&quot;com.greencatsoft&quot; %%% &quot;scalajs-angular&quot; % &quot;0.3&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/scalaz&quot;&gt;scalaz&lt;/a&gt;: &lt;code&gt;&quot;com.github.japgolly.fork.scalaz&quot; %%% &quot;scalaz-core&quot; % &quot;7.1.0-4&quot;&lt;/code&gt; &lt;em&gt;(plus other modules + version 7.1.1)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/Monocle&quot;&gt;Monocle&lt;/a&gt;: &lt;code&gt;&quot;com.github.japgolly.fork.monocle&quot; %%% &quot;monocle-core&quot; % &quot;1.0.1&quot;&lt;/code&gt; &lt;em&gt;(plus other modules)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/rng&quot;&gt;NICTA/rng&lt;/a&gt;: &lt;code&gt;&quot;com.github.japgolly.fork.nicta&quot; %%% &quot;rng&quot; % &quot;1.3.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/shapeless&quot;&gt;Shapeless&lt;/a&gt;: &lt;code&gt;&quot;com.github.japgolly.fork.shapeless&quot; %%% &quot;shapeless&quot; % &quot;2.0.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/scalajs-react&quot;&gt;scalajs-react&lt;/a&gt;: &lt;code&gt;&quot;com.github.japgolly.scalajs-react&quot; %%% &quot;core&quot; % &quot;0.7.2&quot;&lt;/code&gt; &lt;em&gt;(plus other modules)&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/nyaya&quot;&gt;nyaya&lt;/a&gt;: &lt;code&gt;&quot;com.github.japgolly.nyaya&quot; %%% &quot;nyaya-core&quot; % &quot;0.5.2&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following testing frameworks are available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;utest&quot; % &quot;0.3.0&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;: &lt;code&gt;&quot;org.monifu&quot; %%% &quot;minitest&quot; % &quot;0.11&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/greencatsoft/greenlight&quot;&gt;Greenlight&lt;/a&gt;: &lt;code&gt;&quot;com.greencatsoft&quot; %%% &quot;greenlight&quot; % &quot;0.1-SNAPSHOT&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/rickynils/scalacheck&quot;&gt;ScalaCheck&lt;/a&gt;: &lt;code&gt;&quot;com.github.inthenow&quot; %%% &quot;scalacheck&quot; % &quot;1.12.2&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/InTheNow/zcheck&quot;&gt;zCheck&lt;/a&gt;: &lt;code&gt;&quot;com.github.inthenow&quot; %%% &quot;zcheck&quot; % &quot;0.6.0&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And the following helper sbt plugins as well:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/workbench&quot;&gt;Workbench&lt;/a&gt;: &lt;code&gt;addSbtPlugin(&quot;com.lihaoyi&quot; % &quot;workbench&quot; % &quot;0.2.3&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;@InTheNow’s &lt;a href=&quot;https://github.com/InTheNow/sbt-scalajs&quot;&gt;sbt-scalajs&lt;/a&gt;: &lt;code&gt;addSbtPlugin(&quot;com.github.inthenow&quot; % &quot;sbt-scalajs&quot; % &quot;0.6.0&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also a new–and incompatible–version of the DOM API.
We recommend that you first upgrade to 0.7.0 and the above libraries while upgrading to Scala.js 0.6.0.
As a second step, you can upgrade to the DOM API version 0.8.0.
Libraries depending on the DOM API must also be republished against this version of the DOM API, since it is by and large incompatible with 0.7.0.
Here are the 0.8.0 versions of said libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: &lt;code&gt;&quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.8.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.8.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;scalatags&quot; % &quot;0.4.5&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jokade/scalajs-angulate&quot;&gt;scalajs-angulate&lt;/a&gt; and &lt;a href=&quot;https://github.com/greencatsoft/scalajs-angular&quot;&gt;scalajs-angular&lt;/a&gt;: not yet published&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/japgolly/scalajs-react&quot;&gt;scalajs-react&lt;/a&gt;: &lt;code&gt;&quot;com.github.japgolly.scalajs-react&quot; %%% &quot;core&quot; % &quot;0.8.0&quot;&lt;/code&gt; &lt;em&gt;(plus other modules)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To start a Play! project with Scala.js, have a look at &lt;a href=&quot;https://github.com/vmunier/play-with-scalajs-example&quot;&gt;play-with-scalajs-example&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-05x&quot;&gt;Preparations before upgrading from 0.5.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-scalajs-jasmine-test-framework&quot;&gt;Migrate away from the Scala.js Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework wrapper for Scala.js (&lt;code&gt;scalajs-jasmine-test-framework&lt;/code&gt;), migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework wrapper is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/greencatsoft/greenlight&quot;&gt;Greenlight&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0 before you can use them.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-from-056&quot;&gt;Upgrade to 0.6.0 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/6ccd5f64c3d46b203685a3c0762142513f5cc3e9&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.7.&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code&gt;fastOpt&lt;/code&gt; and &lt;code&gt;fullOpt&lt;/code&gt; stages.
In Scala 0.5.x, you could run in the &lt;code&gt;fastOpt&lt;/code&gt; stage with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 0.6.x, the stage is regulated by the setting &lt;code&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FastOptStage&lt;/code&gt;: &lt;code&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FullOptStage&lt;/code&gt;: &lt;code&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting source compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in the PreLink and FastOpt stages&lt;/em&gt;, by throwing an &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code&gt;ClassCastException&lt;/code&gt;).
&lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in the fullOpt stage than in the other stages.
The idea of &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (in all stages), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sound.&lt;/p&gt;

&lt;h3 id=&quot;the-scalascalajsjs-package-has-been-simplified&quot;&gt;The &lt;code&gt;scala.scalajs.js&lt;/code&gt; package has been simplified&lt;/h3&gt;

&lt;p&gt;We have removed a lot of historical warts from the &lt;code&gt;scala.scalajs.js&lt;/code&gt; package, mostly types and APIs with equivalents among normal Scala types and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;js.String&lt;/code&gt;, &lt;code&gt;js.Boolean&lt;/code&gt;, &lt;code&gt;js.Number&lt;/code&gt; and &lt;code&gt;js.Undefined&lt;/code&gt; have been removed, as well as their &lt;code&gt;js.prim.*&lt;/code&gt; equivalent.
&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Unit&lt;/code&gt; should be used instead, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.parseInt(s)&lt;/code&gt; and &lt;code&gt;js.parseFloat(s)&lt;/code&gt; should be replaced by &lt;code&gt;s.toInt&lt;/code&gt; and &lt;code&gt;s.toDouble&lt;/code&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.NaN&lt;/code&gt;, &lt;code&gt;js.Infinity&lt;/code&gt; should be replaced by &lt;code&gt;Double.NaN&lt;/code&gt; and &lt;code&gt;Double.PositiveInfinity&lt;/code&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.isNaN(x)&lt;/code&gt; should be replaced by &lt;code&gt;x.isNaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.isFinite(x)&lt;/code&gt; should be replaced by &lt;code&gt;!x.isNaN &amp;amp;&amp;amp; !x.isInfinite&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods provided by ECMAScript 5.1 on primitive strings and numbers can be enabled by importing the following implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSStringOps._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSNumberOps._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code&gt;Foo&lt;/code&gt; is exported as &lt;code&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time, and severe discrepencies with the JVM sbt testing interface.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0/sbt-plugin-test/build.sbt#L49-L64&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0/sbt-plugin-test/build.sbt#L66-L86&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;a-namecross-projecta-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code&gt;CrossProject&lt;/code&gt; type, and its &lt;code&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;http://www.scala-js.org/api/sbt-scalajs/0.6.0/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.0 benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Range.foreach&lt;/code&gt;, aka the &lt;code&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code&gt;js.Array&lt;/code&gt;s and &lt;code&gt;js.Dictionary&lt;/code&gt;s (such as &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code&gt;js.Array&lt;/code&gt; wrapped in a &lt;code&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicits-to-make-writing-javascript-easier&quot;&gt;Implicits to make “writing JavaScript” easier&lt;/h3&gt;

&lt;p&gt;Sometimes, for example when porting existing JavaScript code, we want to just “write JavaScript” inside our Scala.js code.
A new object &lt;code&gt;js.DynamicImplicits&lt;/code&gt; (&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.0/#scala.scalajs.js.DynamicImplicits$&quot;&gt;API&lt;/a&gt;) provides implicit conversions that allow to write dynamically typed JavaScriptish code directly in Scala.js with a mimimal amount of boilerplate.
Needless to say, these implicits should be handled with care, but they can come in handy.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;obfuscation-of-class-names&quot;&gt;Obfuscation of class names&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scalaJSSemantics&lt;/code&gt; option also allows to obfuscate or otherwise rename the class names in the emitted .js file, as was requested in &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1113&quot;&gt;#1113&lt;/a&gt;.
For example, this sbt setting empties out all class names in the package &lt;code&gt;my.company&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withRuntimeClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my.company.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This changes the value returned by &lt;code&gt;x.getClass.getName&lt;/code&gt; or &lt;code&gt;classOf[C].getName&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine Maven and Gradle plugins for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven/Gradle user could therefore build a Maven/Gradle plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,686 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1430&quot;&gt;#1430&lt;/a&gt; &lt;code&gt;ClassTag.unapply&lt;/code&gt; method (for deconstruction) fails for raw JS classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1423&quot;&gt;#1423&lt;/a&gt; String.getBytes returns trailing zeroes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1402&quot;&gt;#1402&lt;/a&gt; &lt;code&gt;Traversers&lt;/code&gt; does not handle the case of &lt;code&gt;Debugger&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1451&quot;&gt;#1451&lt;/a&gt; ScalaDoc run crashes with property &lt;code&gt;@JSExports&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1455&quot;&gt;#1455&lt;/a&gt; Runs for ScalaDoc complain about &lt;code&gt;@JSExport(SomeFinalVal)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1458&quot;&gt;#1458&lt;/a&gt; PhantomJS 2 expects a scheme name (&lt;code&gt;file:///&lt;/code&gt;) for all urls, not just a path to local files&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2015/02/05/announcing-scalajs-0.6.0/</link>
                <guid>http://www.scala-js.org/news/2015/02/05/announcing-scalajs-0.6.0</guid>
                <pubDate>2015-02-05T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.0-RC2</title>
                <description>&lt;p&gt;We are excited to announce the second release candidate of Scala.js 0.6.0, aka 0.6.0-RC2!
Unless there are blocking issues with this RC, or issues requiring binary incompatible changes, this version will become 0.6.0 final.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Compared to 0.6.0-RC1, this is strictly a bug fix release.
The following bugs have been fixed in this second RC:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1451&quot;&gt;#1451&lt;/a&gt; ScalaDoc run crashes with property &lt;code&gt;@JSExports&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1452&quot;&gt;#1452&lt;/a&gt; PhantomJS sometimes doesn’t shut down properly on Linux&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1453&quot;&gt;#1453&lt;/a&gt; Critical incorrect constant folding of &lt;code&gt;* (-1)&lt;/code&gt; in the optimizer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1455&quot;&gt;#1455&lt;/a&gt; Runs for ScalaDoc complain about &lt;code&gt;@JSExport(SomeFinalVal)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1458&quot;&gt;#1458&lt;/a&gt; PhantomJS 2 expects a scheme name (&lt;code&gt;file:///&lt;/code&gt;) for all urls, not just a path to local files&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Scala.js 0.6.0-RC2 is backward and forward binary compatible with 0.6.0-RC1.
Libraries already published for RC1 need therefore not be published again against RC2.&lt;/p&gt;

&lt;p&gt;To upgrade from 0.6.0-Mx/RC1, simply change the version number.
If you’re upgrading from M1/M2, you might need to address some compilation errors regarding the &lt;code&gt;js&lt;/code&gt; package, but it should be straightforward.
Should you encounter any trouble, do not hesitate to ask.&lt;/p&gt;

&lt;p&gt;The rest of this announcement is cumulative with the changes introduced in the milestones and RC1, and is therefore written wrt. 0.5.6.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0-RC1 or RC2 to be compatible.
More importantly, this release is not source compatible with 0.5.x either.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-RC1/RC2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: &lt;code&gt;&quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;scalarx&quot; % &quot;0.2.7-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;scalatags&quot; % &quot;0.4.3-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;autowire&quot; % &quot;0.2.4-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;upickle&quot; % &quot;0.2.6-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;utest&quot; % &quot;0.2.5-RC1&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;: &lt;code&gt;&quot;org.monifu&quot; %%% &quot;minitest&quot; % &quot;0.10&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-05x&quot;&gt;Preparations before upgrading from 0.5.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-RC2, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-scalajs-jasmine-test-framework&quot;&gt;Migrate away from the Scala.js Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework wrapper for Scala.js (&lt;code&gt;scalajs-jasmine-test-framework&lt;/code&gt;), migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework wrapper is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-RC1/RC2 before you can use them.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-rc2-from-056&quot;&gt;Upgrade to 0.6.0-RC2 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/07e940a6fe4d2208ab633402d6849eb020ec277d&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-RC2-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code&gt;fastOpt&lt;/code&gt; and &lt;code&gt;fullOpt&lt;/code&gt; stages.
In Scala 0.5.x, you could run in the &lt;code&gt;fastOpt&lt;/code&gt; stage with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 0.6.x, the stage is regulated by the setting &lt;code&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FastOptStage&lt;/code&gt;: &lt;code&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FullOptStage&lt;/code&gt;: &lt;code&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting source compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in the PreLink and FastOpt stages&lt;/em&gt;, by throwing an &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code&gt;ClassCastException&lt;/code&gt;).
&lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in the fullOpt stage than in the other stages.
The idea of &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (in all stages), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sound.&lt;/p&gt;

&lt;h3 id=&quot;the-scalascalajsjs-package-has-been-simplified&quot;&gt;The &lt;code&gt;scala.scalajs.js&lt;/code&gt; package has been simplified&lt;/h3&gt;

&lt;p&gt;We have removed a lot of historical warts from the &lt;code&gt;scala.scalajs.js&lt;/code&gt; package, mostly types and APIs with equivalents among normal Scala types and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;js.String&lt;/code&gt;, &lt;code&gt;js.Boolean&lt;/code&gt;, &lt;code&gt;js.Number&lt;/code&gt; and &lt;code&gt;js.Undefined&lt;/code&gt; have been removed, as well as their &lt;code&gt;js.prim.*&lt;/code&gt; equivalent.
&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Unit&lt;/code&gt; should be used instead, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.parseInt(s)&lt;/code&gt; and &lt;code&gt;js.parseFloat(s)&lt;/code&gt; should be replaced by &lt;code&gt;s.toInt&lt;/code&gt; and &lt;code&gt;s.toDouble&lt;/code&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.NaN&lt;/code&gt;, &lt;code&gt;js.Infinity&lt;/code&gt; should be replaced by &lt;code&gt;Double.NaN&lt;/code&gt; and &lt;code&gt;Double.PositiveInfinity&lt;/code&gt;, respectively.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.isNaN(x)&lt;/code&gt; should be replaced by &lt;code&gt;x.isNaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.isFinite(x)&lt;/code&gt; should be replaced by &lt;code&gt;!x.isNaN &amp;amp;&amp;amp; !x.isInfinite&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods provided by ECMAScript 5.1 on primitive strings and numbers can be enabled by importing the following implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSStringOps._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSNumberOps._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code&gt;Foo&lt;/code&gt; is exported as &lt;code&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time, and severe discrepencies with the JVM sbt testing interface.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC2/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-RC2/sbt-plugin-test/build.sbt#L49-L64&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC2/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-RC2/sbt-plugin-test/build.sbt#L66-L86&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC2/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;a-namecross-projecta-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code&gt;CrossProject&lt;/code&gt; type, and its &lt;code&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;http://www.scala-js.org/api/sbt-scalajs/0.6.0-RC2/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Range.foreach&lt;/code&gt;, aka the &lt;code&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code&gt;js.Array&lt;/code&gt;s and &lt;code&gt;js.Dictionary&lt;/code&gt;s (such as &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code&gt;js.Array&lt;/code&gt; wrapped in a &lt;code&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicits-to-make-writing-javascript-easier&quot;&gt;Implicits to make “writing JavaScript” easier&lt;/h3&gt;

&lt;p&gt;Sometimes, for example when porting existing JavaScript code, we want to just “write JavaScript” inside our Scala.js code.
A new object &lt;code&gt;js.DynamicImplicits&lt;/code&gt; (&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.0-RC2/#scala.scalajs.js.DynamicImplicits$&quot;&gt;API&lt;/a&gt;) provides implicit conversions that allow to write dynamically typed JavaScriptish code directly in Scala.js with a mimimal amount of boilerplate.
Needless to say, these implicits should be handled with care, but they can come in handy.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;obfuscation-of-class-names&quot;&gt;Obfuscation of class names&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scalaJSSemantics&lt;/code&gt; option also allows to obfuscate or otherwise rename the class names in the emitted .js file, as was requested in &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1113&quot;&gt;#1113&lt;/a&gt;.
For example, this sbt setting empties out all class names in the package &lt;code&gt;my.company&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withRuntimeClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my.company.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This changes the value returned by &lt;code&gt;x.getClass.getName&lt;/code&gt; or &lt;code&gt;classOf[C].getName&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,686 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1430&quot;&gt;#1430&lt;/a&gt; &lt;code&gt;ClassTag.unapply&lt;/code&gt; method (for deconstruction) fails for raw JS classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1423&quot;&gt;#1423&lt;/a&gt; String.getBytes returns trailing zeroes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1402&quot;&gt;#1402&lt;/a&gt; &lt;code&gt;Traversers&lt;/code&gt; does not handle the case of &lt;code&gt;Debugger&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1451&quot;&gt;#1451&lt;/a&gt; ScalaDoc run crashes with property &lt;code&gt;@JSExports&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1455&quot;&gt;#1455&lt;/a&gt; Runs for ScalaDoc complain about &lt;code&gt;@JSExport(SomeFinalVal)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1458&quot;&gt;#1458&lt;/a&gt; PhantomJS 2 expects a scheme name (&lt;code&gt;file:///&lt;/code&gt;) for all urls, not just a path to local files&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2015/01/23/announcing-scalajs-0.6.0-RC2/</link>
                <guid>http://www.scala-js.org/news/2015/01/23/announcing-scalajs-0.6.0-RC2</guid>
                <pubDate>2015-01-23T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.0-RC1</title>
                <description>&lt;p&gt;We are excited to announce the first release candidate of Scala.js 0.6.0, aka 0.6.0-RC1!
Unless there are blocking issues with this RC, or issues requiring binary incompatible changes, this version will become 0.6.0 final.&lt;/p&gt;

&lt;p&gt;Scala.js 0.6.0-RC1 is not forward nor backward binary compatible with M1/M2/M3.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To upgrade from 0.6.0-Mx, simply change the version number.
If you’re upgrading from M1/M2, you might need to address some compilation errors regarding the &lt;code&gt;js&lt;/code&gt; package, but it should be straightforward.
Should you encounter any trouble, do not hesitate to ask.&lt;/p&gt;

&lt;p&gt;The rest of this announcement is cumulative with the changes introduced in the milestones, and is therefore written wrt. 0.5.6.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0-RC1 to be compatible.
More importantly, this release is not source compatible with 0.5.x either.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-RC1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: &lt;code&gt;&quot;org.scala-js&quot; %%% &quot;scalajs-dom&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;scalarx&quot; % &quot;0.2.7-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;scalatags&quot; % &quot;0.4.3-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;autowire&quot; % &quot;0.2.4-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;upickle&quot; % &quot;0.2.6-RC1&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: &lt;code&gt;&quot;com.lihaoyi&quot; %%% &quot;utest&quot; % &quot;0.2.5-RC1&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;: &lt;code&gt;&quot;org.monifu&quot; %%% &quot;minitest&quot; % &quot;0.10&quot; % &quot;test&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-05x&quot;&gt;Preparations before upgrading from 0.5.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-RC1, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-jasmine-test-framework&quot;&gt;Migrate away from the Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework, migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-RC1 before you can use them.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-rc1-from-056&quot;&gt;Upgrade to 0.6.0-RC1 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/77d5f970267247c714a164f3dd72e51605f3ef66&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-RC1-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code&gt;fastOpt&lt;/code&gt; and &lt;code&gt;fullOpt&lt;/code&gt; mode.
In Scala 0.5.x, you could run in &lt;code&gt;fastOpt&lt;/code&gt; mode with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 0.6.x, the mode is regulated by the setting &lt;code&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FastOptStage&lt;/code&gt;: &lt;code&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FullOptStage&lt;/code&gt;: &lt;code&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting source compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in fastOpt mode&lt;/em&gt;, by throwing an &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code&gt;ClassCastException&lt;/code&gt;).
&lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in fastOpt mode than in fullOpt.
The idea of &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (both in fastOpt and fullOpt modes), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sensical.&lt;/p&gt;

&lt;h3 id=&quot;the-scalascalajsjs-package-has-been-simplified&quot;&gt;The &lt;code&gt;scala.scalajs.js&lt;/code&gt; package has been simplified&lt;/h3&gt;

&lt;p&gt;We have removed a lot of historical warts from the &lt;code&gt;scala.scalajs.js&lt;/code&gt; package, mostly types and APIs with equivalents among normal Scala types and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;js.String&lt;/code&gt;, &lt;code&gt;js.Boolean&lt;/code&gt;, &lt;code&gt;js.Number&lt;/code&gt; and &lt;code&gt;js.Undefined&lt;/code&gt; have been removed, as well as their &lt;code&gt;js.prim.*&lt;/code&gt; equivalent.
&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Unit&lt;/code&gt; should be used instead.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.parseInt(s)&lt;/code&gt; and &lt;code&gt;js.parseFloat(s)&lt;/code&gt; should be replaced by &lt;code&gt;s.toInt&lt;/code&gt; and &lt;code&gt;s.toDouble&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.NaN&lt;/code&gt;, &lt;code&gt;js.Infinity&lt;/code&gt; should be replaced by &lt;code&gt;Double.NaN&lt;/code&gt; and &lt;code&gt;Double.PositiveInfinity&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.isNaN(x)&lt;/code&gt; should be replaced by &lt;code&gt;x.isNaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.isFinite(x)&lt;/code&gt; should be replaced by &lt;code&gt;!x.isNaN &amp;amp;&amp;amp; !x.isInfinite&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods provided by ECMAScript 5.1 on primitive strings and numbers can be enabled by importing the following implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSStringOps._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSNumberOps._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code&gt;Foo&lt;/code&gt; is exported as &lt;code&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC1/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-RC1/sbt-plugin-test/build.sbt#L49-L64&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC1/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-RC1/sbt-plugin-test/build.sbt#L66-L86&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-RC1/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;a-namecross-projecta-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code&gt;CrossProject&lt;/code&gt; type, and its &lt;code&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;http://www.scala-js.org/api/sbt-scalajs/0.6.0-RC1/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Range.foreach&lt;/code&gt;, aka the &lt;code&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code&gt;js.Array&lt;/code&gt;s and &lt;code&gt;js.Dictionary&lt;/code&gt;s (such as &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code&gt;js.Array&lt;/code&gt; wrapped in a &lt;code&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicits-to-make-writing-javascript-easier&quot;&gt;Implicits to make “writing JavaScript” easier&lt;/h3&gt;

&lt;p&gt;Sometimes, for example when porting existing JavaScript code, we want to just “write JavaScript” inside our Scala.js code.
A new object &lt;code&gt;js.DynamicImplicits&lt;/code&gt; (&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.0-RC1/#scala.scalajs.js.DynamicImplicits$&quot;&gt;API&lt;/a&gt; provides implicit conversions that allow to write dynamically typed JavaScriptish code directly in Scala.js with a mimimal amount of boilerplate.
Needless to say, these implicits should be handled with care, but they can come in handy.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;obfuscation-of-class-names&quot;&gt;Obfuscation of class names&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;scalaJSSemantics&lt;/code&gt; option also allows to obfuscate or otherwise rename the class names in the emitted .js file, as was requested in &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1113&quot;&gt;#1113&lt;/a&gt;.
For example, this sbt setting empties out all class names in the package &lt;code&gt;my.company&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withRuntimeClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linkedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;my.company.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fullName&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This changes the value returned by &lt;code&gt;x.getClass.getName&lt;/code&gt; or &lt;code&gt;classOf[C].getName&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,686 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1430&quot;&gt;#1430&lt;/a&gt; &lt;code&gt;ClassTag.unapply&lt;/code&gt; method (for deconstruction) fails for raw JS classes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1423&quot;&gt;#1423&lt;/a&gt; String.getBytes returns trailing zeroes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1402&quot;&gt;#1402&lt;/a&gt; &lt;code&gt;Traversers&lt;/code&gt; does not handle the case of &lt;code&gt;Debugger&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2015/01/12/announcing-scalajs-0.6.0-RC1/</link>
                <guid>http://www.scala-js.org/news/2015/01/12/announcing-scalajs-0.6.0-RC1</guid>
                <pubDate>2015-01-12T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.0-M3</title>
                <description>&lt;p&gt;We are excited to announce the third milestone of Scala.js 0.6.0, aka 0.6.0-M3!
This release is mostly about the (hopefully) last binary incompatible changes for the 0.6.x series.
It also substantially reworks the &lt;code&gt;scala.scalajs.js&lt;/code&gt; package to simplify it (see below for details).&lt;/p&gt;

&lt;p&gt;Scala.js 0.6.0-M3 is not forward nor backward binary compatible with M1/M2.
We expect that all subsequent milestones and RCs for 0.6.x will stay binary compatible with M3, though.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To upgrade from 0.6.0-M1/M2, simply change the version number.
You might need to address some compilation errors regarding the &lt;code&gt;js&lt;/code&gt; package, but it should be straightforward.
Should you encounter any trouble, do not hesitate to ask.&lt;/p&gt;

&lt;p&gt;The rest of this announcement is cumulative with the changes introduced in M1 and M2.&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0-M3 to be compatible.&lt;/p&gt;

&lt;p&gt;More importantly, this release is not source compatible with 0.5.x either.
We expect, however, that further milestones and 0.6.x will stay source compatible with this milestone.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-M3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: 0.7.0&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-jquery&quot;&gt;jQuery types&lt;/a&gt;: &lt;code&gt;&quot;be.doeraene&quot; %%% &quot;scalajs-jquery&quot; % &quot;0.7.0&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: 0.2.7-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: 0.4.3-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: 0.2.4-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: 0.2.6-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: 0.2.5-M3&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;: 0.6&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;NOT DONE YET&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-M3, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-jasmine-test-framework&quot;&gt;Migrate away from the Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework, migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/monifu/minitest&quot;&gt;MiniTest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-M3 before you can use them.
You might need to disable your testing infrastructure in the meantime, if you want to start using 0.6.0-M3 before they are ready.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-m3-from-056&quot;&gt;Upgrade to 0.6.0-M3 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/11c56d9700eff3922fb98472ebcf5e9b19f18e1e&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-M3-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code&gt;fastOpt&lt;/code&gt; and &lt;code&gt;fullOpt&lt;/code&gt; mode.
In Scala 0.5.x, you could run in &lt;code&gt;fastOpt&lt;/code&gt; mode with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 0.6.x, the mode is regulated by the setting &lt;code&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FastOptStage&lt;/code&gt;: &lt;code&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FullOptStage&lt;/code&gt;: &lt;code&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in fastOpt mode&lt;/em&gt;, by throwing an &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code&gt;ClassCastException&lt;/code&gt;).
&lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in fastOpt mode than in fullOpt.
The idea of &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (both in fastOpt and fullOpt modes), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sensical.&lt;/p&gt;

&lt;h3 id=&quot;the-scalascalajsjs-has-been-simplified&quot;&gt;The &lt;code&gt;scala.scalajs.js&lt;/code&gt; has been simplified&lt;/h3&gt;

&lt;p&gt;We have removed a lot of historical warts from the &lt;code&gt;scala.scalajs.js&lt;/code&gt; package, mostly types and APIs with equivalents among normal Scala types and libraries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;js.String&lt;/code&gt;, &lt;code&gt;js.Boolean&lt;/code&gt;, &lt;code&gt;js.Number&lt;/code&gt; and &lt;code&gt;js.Undefined&lt;/code&gt; have been removed, as well as their &lt;code&gt;js.prim.*&lt;/code&gt; equivalent.
&lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Boolean&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt; and &lt;code&gt;Unit&lt;/code&gt; should be used instead.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.parseInt(s)&lt;/code&gt; and &lt;code&gt;js.parseFloat(s)&lt;/code&gt; should be replaced by &lt;code&gt;s.toInt&lt;/code&gt; and &lt;code&gt;s.toDouble&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.NaN&lt;/code&gt;, &lt;code&gt;js.Infinity&lt;/code&gt; should be replaced by &lt;code&gt;Double.NaN&lt;/code&gt; and &lt;code&gt;Double.PositiveInfinity&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.isNaN(x)&lt;/code&gt; should be replaced by &lt;code&gt;x.isNaN&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;js.isFinite(x)&lt;/code&gt; should be replaced by &lt;code&gt;!x.isNaN &amp;amp;&amp;amp; !x.isInfinite&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Methods provided by ECMAScript 5.1 on primitive strings and numbers can be enabled by importing the following implicit conversions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSStringOps._&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;js.JSNumberOps._&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code&gt;Foo&lt;/code&gt; is exported as &lt;code&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M3/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M3/sbt-plugin-test/build.sbt#L47-L62&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M3/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M3/sbt-plugin-test/build.sbt#L64-L84&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M3/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;a-namecross-projecta-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code&gt;CrossProject&lt;/code&gt; type, and its &lt;code&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;http://www.scala-js.org/api/sbt-scalajs/0.6.0-M3/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Range.foreach&lt;/code&gt;, aka the &lt;code&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code&gt;js.Array&lt;/code&gt;s (such as &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code&gt;js.Array&lt;/code&gt; wrapped in a &lt;code&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implicits-to-make-writing-javascript-easier&quot;&gt;Implicits to make “writing JavaScript” easier&lt;/h3&gt;

&lt;p&gt;Sometimes, for example when porting existing JavaScript code, we want to just “write JavaScript” inside our Scala.js code.
A new object &lt;code&gt;js.DynamicImplicits&lt;/code&gt; (&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.6.0-M3/#scala.scalajs.js.DynamicImplicits$&quot;&gt;API&lt;/a&gt; provides implicit conversions that allow to write dynamically typed JavaScriptish code directly in Scala.js with a mimimal amount of boilerplate.
Needless to say, these implicits should be handled with care, but they can come in handy.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,211 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1402&quot;&gt;#1402&lt;/a&gt; &lt;code&gt;Traversers&lt;/code&gt; does not handle the case of &lt;code&gt;Debugger&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2014/12/22/announcing-scalajs-0.6.0-M3/</link>
                <guid>http://www.scala-js.org/news/2014/12/22/announcing-scalajs-0.6.0-M3</guid>
                <pubDate>2014-12-22T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.0-M2</title>
                <description>&lt;p&gt;We are excited to announce the second milestone of Scala.js 0.6.0, aka 0.6.0-M2!
This release fixes the last outstanding issues from M1.
Most notably &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1331&quot;&gt;#1335&lt;/a&gt; and &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1335&quot;&gt;#1331&lt;/a&gt;, so &lt;code&gt;%%%&lt;/code&gt; is fixed.
It also introduces &lt;a href=&quot;#cross-project&quot;&gt;a builder for cross-compiling projects in sbt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scala.js 0.6.0-M2 is forward and backward binary compatible with M1, and uses the same cross-compilation suffix (i.e., &lt;code&gt;_sjs0.6.0-M1&lt;/code&gt;), so you can use libraries built with 0.6.0-M1 in 0.6.0-M2, and conversely.
It is also backward source compatible with M1.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;The rest of this announcement is cumulative with the changes introduced in M1.&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using 0.6.0-M1 or M2 to be compatible.&lt;/p&gt;

&lt;p&gt;More importantly, this release is not source compatible with 0.5.x either.
We expect, however, that further milestones and 0.6.x will stay source compatible with this first milestone.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-M1 and M2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: 0.7.0&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: 0.2.7-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: 0.4.3-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: 0.2.4-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: 0.2.5-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: 0.2.6-M1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-M2, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-jasmine-test-framework&quot;&gt;Migrate away from the Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework, migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-M1 or M2 before you can use them.
You might need to disable your testing infrastructure in the meantime, if you want to start using 0.6.0-M2 before they are ready.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-m2-from-056&quot;&gt;Upgrade to 0.6.0-M2 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/fdc2b9c2dedcbcf64086b11b74e980cfe0792847&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-M1/M2-enabled versions of your dependencies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code&gt;fastOpt&lt;/code&gt; and &lt;code&gt;fullOpt&lt;/code&gt; mode.
In Scala 0.5.x, you could run in &lt;code&gt;fastOpt&lt;/code&gt; mode with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 0.6.x, the mode is regulated by the setting &lt;code&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FastOptStage&lt;/code&gt;: &lt;code&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FullOptStage&lt;/code&gt;: &lt;code&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOpt mode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in fastOpt mode&lt;/em&gt;, by throwing an &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code&gt;ClassCastException&lt;/code&gt;).
&lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in fastOpt mode than in fullOpt.
The idea of &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (both in fastOpt and fullOpt modes), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sensical.&lt;/p&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code&gt;Foo&lt;/code&gt; is exported as &lt;code&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M1/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M2/sbt-plugin-test/build.sbt#L47-L62&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M2/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M2/sbt-plugin-test/build.sbt#L64-L84&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M2/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;a-namecross-projecta-defining-cross-compiling-projects-with-crossproject&quot;&gt;&lt;a name=&quot;cross-project&quot;&gt;&lt;/a&gt; Defining cross-compiling projects with &lt;code&gt;crossProject&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;When writing cross-compiling code, we need to have two separate projects in sbt for the JVM target and the JS target.
The new &lt;code&gt;CrossProject&lt;/code&gt; type, and its &lt;code&gt;crossProject&lt;/code&gt; builder, helps in defining these pairs of projects in a DRY way.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;http://www.scala-js.org/api/sbt-scalajs/0.6.0-M2/#org.scalajs.sbtplugin.cross.CrossProject&quot;&gt;documentation of &lt;code&gt;CrossProject&lt;/code&gt;&lt;/a&gt; for more information and examples.&lt;/p&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Range.foreach&lt;/code&gt;, aka the &lt;code&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code&gt;js.Array&lt;/code&gt;s (such as &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code&gt;js.Array&lt;/code&gt; wrapped in a &lt;code&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,211 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1349&quot;&gt;#1349&lt;/a&gt; Auto-completion in runMain task does not work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.0-M1+is%3Aclosed&quot;&gt;full list&lt;/a&gt; on GitHub.&lt;/p&gt;
</description>
                <link>http://www.scala-js.org/news/2014/12/05/announcing-scalajs-0.6.0-M2/</link>
                <guid>http://www.scala-js.org/news/2014/12/05/announcing-scalajs-0.6.0-M2</guid>
                <pubDate>2014-12-05T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.6.0-M1</title>
                <description>&lt;p&gt;We are excited to announce the first milestone of Scala.js 0.6.0, aka 0.6.0-M1!&lt;/p&gt;

&lt;p&gt;This development release is mostly intended for testing purposes, and as a synchronization point with library authors so that they can start upgrading in preparation for the final release.&lt;/p&gt;

&lt;p&gt;As the change in “major” version number witnesses, this release is &lt;em&gt;not&lt;/em&gt; binary compatible with 0.5.x.
Libraries need to be recompiled and republished using this milestone to be compatible.&lt;/p&gt;

&lt;p&gt;More importantly, this release is not source compatible with 0.5.x either.
We expect, however, that further milestones and 0.6.x will stay source compatible with this first milestone.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following libraries and testing frameworks have already been upgraded and published for 0.6.0-M1:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js-dom&quot;&gt;DOM types&lt;/a&gt;: 0.7.0&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scala.rx&quot;&gt;Scala.rx&lt;/a&gt;: 0.2.7-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/scalatags&quot;&gt;ScalaTags&lt;/a&gt;: 0.4.3-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/autowire&quot;&gt;Autowire&lt;/a&gt;: 0.2.4-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;µTest&lt;/a&gt;: 0.2.5-M1&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/upickle&quot;&gt;µPickle&lt;/a&gt;: 0.2.6-M1&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;preparations-before-upgrading-from-06x&quot;&gt;Preparations before upgrading from 0.6.x&lt;/h2&gt;

&lt;h3 id=&quot;upgrade-to-056-if-not-already-done&quot;&gt;Upgrade to 0.5.6 if not already done&lt;/h3&gt;

&lt;p&gt;Before upgrading to 0.6.0-M1, &lt;strong&gt;we strongly recommend that you upgrade to Scala.js 0.5.6&lt;/strong&gt;, and address all deprecation warnings.
Scala.js 0.5.6 contains warnings for the most vicious breaking changes of 0.6.x.&lt;/p&gt;

&lt;h3 id=&quot;migrate-away-from-the-jasmine-test-framework&quot;&gt;Migrate away from the Jasmine test framework&lt;/h3&gt;

&lt;p&gt;If you use the Jasmine test framework, migrate away from it to one of the other testing frameworks for Scala.js.
The Jasmine test framework is &lt;em&gt;not&lt;/em&gt; a good testing framework for Scala.js code, and is being &lt;em&gt;removed&lt;/em&gt; in 0.6.x.&lt;/p&gt;

&lt;p&gt;Possible replacements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/eecolor/little-spec&quot;&gt;Little Spec&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cgta/otest&quot;&gt;otest&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that these testing frameworks also need to upgrade to 0.6.0-M1 before you can use them.
You might need to disable your testing infrastructure in the meantime, if you want to start using 0.6.0-M1 before they are ready.&lt;/p&gt;

&lt;h2 id=&quot;upgrade-to-060-m1-from-056&quot;&gt;Upgrade to 0.6.0-M1 from 0.5.6&lt;/h2&gt;

&lt;p&gt;Basically, you need to apply the same kind of changes to your build files as in &lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/09861f30793a35ff102fdb75f449a16fa849fde2&quot;&gt;this commit&lt;/a&gt;, which mostly consists in:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Upgrade to sbt &amp;gt;= 0.13.6 (the current version is 0.13.7).&lt;/li&gt;
  &lt;li&gt;Adaptations to new groupId and artifact names for Scala.js packages.&lt;/li&gt;
  &lt;li&gt;Adaptation to the new &lt;code&gt;AutoPlugin&lt;/code&gt; infrastructure of the sbt plugin.&lt;/li&gt;
  &lt;li&gt;Drop the prefix &lt;code&gt;ScalaJSKeys.&lt;/code&gt; for Scala.js-specific sbt keys, as they are not needed anymore.&lt;/li&gt;
  &lt;li&gt;Upgrade to 0.6.0-M1-enabled versions of your dependencies.&lt;/li&gt;
  &lt;li&gt;(Temporarily) use &lt;code&gt;%%%!&lt;/code&gt; instead of &lt;code&gt;%%%&lt;/code&gt; because &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1331&quot;&gt;the latter is broken&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the sbt command line, not much changes, except the way you use the &lt;code&gt;fastOpt&lt;/code&gt; and &lt;code&gt;fullOpt&lt;/code&gt; mode.
In Scala 0.5.x, you could run in &lt;code&gt;fastOpt&lt;/code&gt; mode with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; fastOptStage::run
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In 0.6.x, the mode is regulated by the setting &lt;code&gt;scalaJSStage&lt;/code&gt;, which is one of:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;PreLinkStage&lt;/code&gt; (default): uses Rhino&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FastOptStage&lt;/code&gt;: &lt;code&gt;fastOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;FullOptStage&lt;/code&gt;: &lt;code&gt;fullOpt&lt;/code&gt; mode, uses Node.js or PhantomJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can change it from the command line with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage := FastOptStage
&amp;gt; run # runs in fastOptMode
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In a multi-project build, you’ll want to change it for all projects, which can be done with &lt;code&gt;in Global&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; set scalaJSStage in Global := FastOptStage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;major-changes&quot;&gt;Major changes&lt;/h2&gt;

&lt;p&gt;This section discusses major changes affecting compatibility, which may or may not apply to your project.&lt;/p&gt;

&lt;h3 id=&quot;classcastexception-becomes-an-undefined-behavior&quot;&gt;&lt;code&gt;ClassCastException&lt;/code&gt; becomes an undefined behavior&lt;/h3&gt;

&lt;p&gt;The JVM, in its incommensurable magnanimity, throws nicely specified exceptions when you do something bad with your code.
For example, it will nicely throw a &lt;code&gt;ClassCastException&lt;/code&gt; if you perform an invalid &lt;code&gt;.asInstanceOf&lt;/code&gt;, or an &lt;code&gt;ArithmeticException&lt;/code&gt; if you divide an integer by 0.&lt;/p&gt;

&lt;p&gt;Since the beginning of time, Scala.js has handled most of these things as &lt;em&gt;undefined behavior&lt;/em&gt;, i.e., &lt;em&gt;anything can happen&lt;/em&gt; if these cases happen.
Until 0.5.x, &lt;code&gt;ClassCastException&lt;/code&gt;s were properly reported, though.
We have found, however, that checking these buggy cases costs up to 100% overhead to the overall execution time of a Scala.js program.&lt;/p&gt;

&lt;p&gt;In Scala.js 0.6.x, therefore, invalid casts become an undefined behavior as well.
However, the compiler will &lt;em&gt;still&lt;/em&gt; be nice with you &lt;em&gt;in fastOpt mode&lt;/em&gt;, by throwing an &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; if you perform an invalid cast (instead of a &lt;code&gt;ClassCastException&lt;/code&gt;).
&lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is a &lt;em&gt;fatal&lt;/em&gt; error, meaning it won’t be caught by &lt;code&gt;case NonFatal(e)&lt;/code&gt; handlers.
In fullOpt mode, the checks are removed for maximum efficiency.&lt;/p&gt;

&lt;p&gt;You &lt;em&gt;must not catch&lt;/em&gt; &lt;code&gt;UndefinedBehaviorError&lt;/code&gt;, since that would cause your program to behave differently in fastOpt mode than in fullOpt.
The idea of &lt;code&gt;UndefinedBehaviorError&lt;/code&gt; is that you can enjoy strict checks and stack traces while developing.&lt;/p&gt;

&lt;p&gt;If you really want &lt;code&gt;ClassCastException&lt;/code&gt;s to be thrown reliably (both in fastOpt and fullOpt modes), you can enable them in your application, at the expense of runtime performance, with the following sbt setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withAsInstanceOfs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CheckedBehavior&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Compliant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This applies to the entire application, including dependencies.
There is no way to select parts of the application where this applies, because there is no way to make that sensical.&lt;/p&gt;

&lt;h3 id=&quot;jsnative-in-facade-types&quot;&gt;&lt;code&gt;js.native&lt;/code&gt; in facade types&lt;/h3&gt;

&lt;p&gt;When writing facade types, it was previously recommended to use &lt;code&gt;???&lt;/code&gt; as a fake body for fields and methods.
You should now use &lt;code&gt;js.native&lt;/code&gt; instead, as in:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foobar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;native&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compiler will emit a warning if you use any other body.
The warning will become an error in 1.0.0.&lt;/p&gt;

&lt;h3 id=&quot;jsexport-exports-to-fully-qualified-names-by-default&quot;&gt;&lt;code&gt;@JSExport&lt;/code&gt; exports to fully qualified names by default&lt;/h3&gt;

&lt;p&gt;As announced by deprecation warnings in the 0.5.6 compiler, putting &lt;code&gt;@JSExport&lt;/code&gt; without an explicit name on an &lt;code&gt;object&lt;/code&gt; or &lt;code&gt;class&lt;/code&gt; changes meaning between 0.5.x and 0.6.x.
Consider this code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;babar&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@JSExport&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In 0.5.x, &lt;code&gt;Foo&lt;/code&gt; is exported as &lt;code&gt;Foo&lt;/code&gt;.
In 0.6.x, it is exported as &lt;code&gt;babar.Foo&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id=&quot;testing-frameworks-adaptations&quot;&gt;Testing frameworks adaptations&lt;/h3&gt;

&lt;p&gt;If you are not a testing framework implementor, this section does not apply to you.
Please follow the migration guidelines of any testing framework you may use.&lt;/p&gt;

&lt;p&gt;Until 0.5.x, Scala.js had a custom, ad-hoc substitute for the sbt testing interface, which allows testing frameworks to integrate with sbt.
Although quite good in its own right, it suffered from several limitations, including the inability for one project to use more than one testing framework at the same time.
Scala.js 0.6.x now supports its JS version of the original sbt testing interface, with all its power, API, and usability features.
We also offer tools to make your testing framework fully source-compatible with the JVM and JS variants of the testing interface, without a single line of platform-specific source code.&lt;/p&gt;

&lt;p&gt;An existing barebone cross-compiling testing framework can be found &lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M1/sbt-plugin-test&quot;&gt;in our tests&lt;/a&gt;.
Some highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M1/sbt-plugin-test/build.sbt#L47-L70&quot;&gt;Build definition for the cross-compiling framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M1/sbt-plugin-test/testFramework/src/main/scala/sbttest/framework&quot;&gt;(Cross-compiling) source code of the testing framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/blob/v0.6.0-M1/sbt-plugin-test/build.sbt#L72-L97&quot;&gt;Build definition for a cross-compiling project using the framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.6.0-M1/sbt-plugin-test/multiTest&quot;&gt;Source code of the project using the framework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Adapting your testing framework to follow this structure is likely to be the easiest path of migration.
You may also want to take a look at &lt;a href=&quot;https://github.com/lihaoyi/utest/pull/45&quot;&gt;the PR we made to uTest&lt;/a&gt; to migrate to Scala.js 0.6.x.&lt;/p&gt;

&lt;p&gt;Should you run into trouble, don’t hesitate to ask on the mailing list!&lt;/p&gt;

&lt;h2 id=&quot;enhancements&quot;&gt;Enhancements&lt;/h2&gt;

&lt;h3 id=&quot;faster&quot;&gt;Faster!&lt;/h3&gt;

&lt;p&gt;Scala.js 0.6.x benefits from many performance improvements, most notably:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;asInstanceOf&lt;/code&gt;s are unchecked (see above), giving &lt;code&gt;fullOpt&lt;/code&gt; code up to twice as fast as before&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Range.foreach&lt;/code&gt;, aka the &lt;code&gt;for (i &amp;lt;- 0 until n)&lt;/code&gt; kind of loops, is inlined away, giving the same performance as an explicit &lt;code&gt;while&lt;/code&gt; loop.&lt;/li&gt;
  &lt;li&gt;Higher-order operations on &lt;code&gt;js.Array&lt;/code&gt;s (such as &lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, etc.) are inlined away as &lt;code&gt;while&lt;/code&gt; loops.&lt;/li&gt;
  &lt;li&gt;Various improvements to the optimizer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scala-collection-api-for-jsarraya-and-jsdictionarya&quot;&gt;Scala collection API for &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The title says it all: &lt;code&gt;js.Array[A]&lt;/code&gt; and &lt;code&gt;js.Dictionary[A]&lt;/code&gt; receive the entire Scala collection API, respectively of &lt;code&gt;mutable.Buffer[A]&lt;/code&gt; and &lt;code&gt;mutable.Map[String, A]&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;js.Array&lt;/code&gt; becomes the default implementation of &lt;code&gt;mutable.Buffer&lt;/code&gt;, i.e., &lt;code&gt;mutable.Buffer.empty&lt;/code&gt; returns a &lt;code&gt;js.Array&lt;/code&gt; wrapped in a &lt;code&gt;js.WrappedArray&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;on-demand-strict-floats&quot;&gt;On-demand strict floats&lt;/h3&gt;

&lt;p&gt;Scala.js under-specifies &lt;code&gt;Float&lt;/code&gt; operations by default, saying that they can sometimes behave as if they were &lt;code&gt;Double&lt;/code&gt;s.
In 0.6.x, you can configure your application to use &lt;em&gt;strict-float semantics&lt;/em&gt;, guaranteeing that all &lt;code&gt;Float&lt;/code&gt; operations behave as on the JVM, with the appropriate truncation of precision (with the notable exception of &lt;code&gt;.toString()&lt;/code&gt;).
The following sbt setting enables this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scalaJSSemantics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withStrictFloats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Beware that this can have a major impact on performance on VMs that do not support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround&quot;&gt;&lt;code&gt;Math.fround&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;

&lt;h3 id=&quot;we-publish-to-maven-central&quot;&gt;We publish to Maven Central&lt;/h3&gt;

&lt;p&gt;This should probably not affect sbt users, but it now becomes possible to imagine a Maven plugin for Scala.js.
To this effect, the sbt plugin codebase has also been refactored, and all parts that are not strictly bound to sbt as a build tool have been extracted in Mavenized artifacts.
An enthusiast Maven user could therefore build a Maven plugin with relatively few lines of code.
As a measurable figure, the code specific to sbt contains only 1,211 lines of code.&lt;/p&gt;

&lt;h2 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h2&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.6:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1324&quot;&gt;#1324&lt;/a&gt; Date.parse should return a Double, not an Int&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1192&quot;&gt;#1192&lt;/a&gt; hashCode for floating points has a very bad distribution&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?q=is%3Aissue+milestone%3Av0.6.0-M1+is%3Aclosed&quot;&gt;full list&lt;/a&gt; on GitHub.&lt;/p&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known issues&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1331&quot;&gt;#1331&lt;/a&gt; &lt;code&gt;%%%&lt;/code&gt; seems broken with “illegal dynamic reference” (workaround available in the issue)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1335&quot;&gt;#1335&lt;/a&gt; Source maps to Scala library are broken&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2014/12/01/announcing-scalajs-0.6.0-M1/</link>
                <guid>http://www.scala-js.org/news/2014/12/01/announcing-scalajs-0.6.0-M1</guid>
                <pubDate>2014-12-01T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.5.6</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.5.6!&lt;/p&gt;

&lt;p&gt;This is a backport release from the upcoming 0.6.x branch and contains various minor bug fixes and enhancements.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To upgrade, change the version number in &lt;code&gt;project/plugins.sbt&lt;/code&gt;, as usual. Further, you will need to upgrade to sbt &amp;gt;= 0.13.6 since this release of Scala.js is published against sbt 0.13.6.&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.6 is binary compatible with Scala.js 0.5.5 and hence backward binary compatible with older releases of the 0.5.x branch.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;changes-in-the-056-release&quot;&gt;Changes in the 0.5.6 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (see also the announcements for &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/09/announcing-scalajs-0.5.2/&quot;&gt;0.5.2&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/30/announcing-scalajs-0.5.3/&quot;&gt;0.5.3&lt;/a&gt;, &lt;a href=&quot;/news/2014/08/29/announcing-scalajs-0.5.4/&quot;&gt;0.5.4&lt;/a&gt; and &lt;a href=&quot;/news/2014/09/18/announcing-scalajs-0.5.5/&quot;&gt;0.5.5&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;export-facilities&quot;&gt;Export Facilities&lt;/h3&gt;

&lt;h4 id=&quot;jsexport-transition&quot;&gt;@JSExport transition&lt;/h4&gt;

&lt;p&gt;In Scala.js 0.6.x, putting &lt;code&gt;@JSExport&lt;/code&gt; on a class or an object will export it to its fully qualified name, rather than its simple name. To ease the transition to 0.6.x, Scala.js 0.5.6 will warn if an &lt;code&gt;@JSExport&lt;/code&gt; annotation without explicit name is put on a top level object or class. Otherwise, such code would silently break when migrating to 0.6.x.&lt;/p&gt;

&lt;p&gt;To silence the warning, simply specify the desired name explicilty.&lt;/p&gt;

&lt;h4 id=&quot;jsexportdescendentclasses&quot;&gt;@JSExportDescendentClasses&lt;/h4&gt;

&lt;p&gt;Analogous to &lt;code&gt;@JSExportDescendentObjects&lt;/code&gt;, this annotation causes all constructors of extending classes to be exported under the fully qualified name of the class.&lt;/p&gt;

&lt;h3 id=&quot;java-library&quot;&gt;Java Library&lt;/h3&gt;

&lt;p&gt;The following features of the Java library have been added:&lt;/p&gt;

&lt;h4 id=&quot;charset-conversions&quot;&gt;Charset Conversions&lt;/h4&gt;

&lt;p&gt;Scala.js now supports the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/index.html?java/nio/charset/StandardCharsets.html&quot;&gt;standard charset conversions&lt;/a&gt; that every JRE supports. You can now pass instances of &lt;code&gt;Charset&lt;/code&gt; to methods that convert bytes to characters and vice versa.&lt;/p&gt;

&lt;p&gt;Note that you should avoid using &lt;code&gt;Charset.forName&lt;/code&gt; (and methods that take charsets as strings in general), since they will make all &lt;code&gt;Charset&lt;/code&gt; implementations reachable and hence explode your code size. If you compile on JDK6 (which does not have &lt;code&gt;StandardCharsets&lt;/code&gt;), you may use &lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.5.6/#scala.scalajs.niocharset.StandardCharsets&quot;&gt;&lt;code&gt;scala.scalajs.niocharset.StandardCharsets&lt;/code&gt;&lt;/a&gt; to retrieve an instance of the desired &lt;code&gt;Charset&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This also allowed to implement &lt;code&gt;String.getBytes&lt;/code&gt; (&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1087&quot;&gt;#1087&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;others&quot;&gt;Others&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;java.io.PrintWriter&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.UUID&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h3&gt;

&lt;p&gt;Amongst others, the following bugs have been fixed since 0.5.5:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1140&quot;&gt;#1140&lt;/a&gt; fullOptJs and fastOptJs hang when running on JDK 8&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1148&quot;&gt;#1148&lt;/a&gt; Compiler crash with Scoverage&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1171&quot;&gt;#1171&lt;/a&gt; String.split / regex discrepancy&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1191&quot;&gt;#1191&lt;/a&gt; Assign multiple variables from a case class with &lt;code&gt;@JSExportAll&lt;/code&gt; causes compilation error&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&quot;https://github.com/scala-js/scala-js/issues?page=1&amp;amp;q=is%3Aissue+is%3Aclosed+milestone%3Av0.5.6&quot;&gt;full list&lt;/a&gt; on GitHub.&lt;/p&gt;
</description>
                <link>http://www.scala-js.org/news/2014/11/19/announcing-scalajs-0.5.6/</link>
                <guid>http://www.scala-js.org/news/2014/11/19/announcing-scalajs-0.5.6</guid>
                <pubDate>2014-11-19T00:00:00+02:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.5.5</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.5.5!&lt;/p&gt;

&lt;p&gt;This release contains various minor bug fixes and enhancements. It is the last anticipated release in the 0.5.x series and prepares the upcoming 0.6.x series by deprecating various obsolete features (see below for details).
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;To upgrade, simply change the version number in &lt;code&gt;project/plugins.sbt&lt;/code&gt;, as usual.&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.5 is backward binary compatible with older versions of the 0.5.x branch. However, it is &lt;em&gt;not&lt;/em&gt; forward binary compatible. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t need to re-publish libraries&lt;/li&gt;
  &lt;li&gt;You must upgrade to Scala.js 0.5.5 if any library you depend on uses Scala.js 0.5.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to re-publish a library, make sure to bump its version.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;upgrading-from-053-and-below&quot;&gt;Upgrading from 0.5.3 and below&lt;/h4&gt;

&lt;p&gt;If you use &lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;, you need to upgrade it to version 0.2.3 or later.
This is due to a binary incompatible change in the sbt plugin in Scala.js 0.5.4.&lt;/p&gt;

&lt;h2 id=&quot;changes-in-the-055-release&quot;&gt;Changes in the 0.5.5 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (see also the announcements for &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/09/announcing-scalajs-0.5.2/&quot;&gt;0.5.2&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/30/announcing-scalajs-0.5.3/&quot;&gt;0.5.3&lt;/a&gt; and &lt;a href=&quot;/news/2014/08/29/announcing-scalajs-0.5.4/&quot;&gt;0.5.4&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;deprecations--renamings&quot;&gt;Deprecations &amp;amp; Renamings&lt;/h3&gt;

&lt;h4 id=&quot;implicit-conversion-between-scalaarray-and-jsarray&quot;&gt;Implicit conversion between &lt;code&gt;scala.Array&lt;/code&gt; and &lt;code&gt;js.Array&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;Implicit conversion between &lt;code&gt;scala.Array&lt;/code&gt; and &lt;code&gt;js.Array&lt;/code&gt; has been deprecated in favor of &lt;code&gt;JSConverters&lt;/code&gt;. Instead of relying on implicit conversion, use &lt;code&gt;toArray&lt;/code&gt; and &lt;code&gt;toJSArray&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;js.Array to scala.Array&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsArr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scArr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toArray&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;scala.Array to js.Array&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.scalajs.js.JSConverters._&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scArr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsArr&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scArr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toJSArray&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Note that these conversions apply equally to other Scala collections like &lt;code&gt;Seq&lt;/code&gt; or &lt;code&gt;List&lt;/code&gt;. Conversion between &lt;code&gt;js.Dictionary&lt;/code&gt; and Scala’s &lt;code&gt;Map&lt;/code&gt; is supported as well.&lt;/p&gt;

&lt;h4 id=&quot;packagejs&quot;&gt;packageJS&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;packageJS&lt;/code&gt; has been deprecated in favor of &lt;code&gt;fastOptJS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Its providing tasks (&lt;code&gt;packageExternalDepsJS&lt;/code&gt;, &lt;code&gt;packageInternalDepsJS&lt;/code&gt; and &lt;code&gt;packageExportedProductsJS&lt;/code&gt;) have been deprecated without replacement. If such a mechanism is required, &lt;a href=&quot;http://www.scala-js.org/api/scalajs-tools/0.5.5/#scala.scalajs.tools.packager.ScalaJSPackager&quot;&gt;&lt;code&gt;ScalaJSPackager&lt;/code&gt;&lt;/a&gt; should be used directly.&lt;/p&gt;

&lt;h4 id=&quot;sbt-task-renamings&quot;&gt;sbt Task Renamings&lt;/h4&gt;

&lt;p&gt;Several sbt tasks have been renamed to avoid conflicts with other sbt plugins (see &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1050&quot;&gt;#1050&lt;/a&gt;). The tasks are still available under their old name in 0.5.5 in order to not break builds, but the aliases will be removed in 0.6.0. Inside the console, only the new name is available.&lt;/p&gt;

&lt;p&gt;We have taken great care to only rename keys which are very unlikely to be used by a Scala.js build. Just in case, a list of the renamings is given below. Note that the sbt plugin will undergo a major reworking in 0.6.0 to make it an &lt;code&gt;AutoPlugin&lt;/code&gt;. We therefore recommend to not update your build yet if you do not need to.&lt;/p&gt;

&lt;table class=&quot;table table-bordered&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Old Name&lt;/th&gt;
      &lt;th&gt;New Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;packageLauncher&lt;/td&gt;
      &lt;td&gt;packageScalaJSLauncher&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;preLinkClasspath&lt;/td&gt;
      &lt;td&gt;scalaJSPreLinkClasspath&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;execClasspath&lt;/td&gt;
      &lt;td&gt;scalaJSExecClasspath&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;launcher&lt;/td&gt;
      &lt;td&gt;scalaJSLauncher&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;jsConsole&lt;/td&gt;
      &lt;td&gt;scalaJSConsole&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;ensureUnforked&lt;/td&gt;
      &lt;td&gt;scalaJSEnsureUnforked&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;requestsDOM&lt;/td&gt;
      &lt;td&gt;scalaJSRequestsDOM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;defaultPostLinkJSEnv&lt;/td&gt;
      &lt;td&gt;scalaJSDefaultPostLinkJSEnv&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;preLinkClasspath&lt;/td&gt;
      &lt;td&gt;scalaJSPreLinkClasspath&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;improvements&quot;&gt;Improvements&lt;/h3&gt;
&lt;p&gt;The following improvements have been made in 0.5.5.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Source mapping support in Rhino (enabled by default) (&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/727&quot;&gt;#727&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Full source mapping support in Node.js (not only in testing). Requires installing &lt;code&gt;source-map-support&lt;/code&gt; via &lt;code&gt;npm&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;The Node.js runner honors the system environment’s &lt;code&gt;NODE_PATH&lt;/code&gt; (&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1016&quot;&gt;#1016&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tiny JVM (only) library containing Scala.js export annotations (&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1006&quot;&gt;#1006&lt;/a&gt;). Use with:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt;  libraryDependencies += &quot;org.scala-lang.modules.scalajs&quot; %% &quot;scalajs-stubs&quot; % &quot;0.5.5&quot;

  resolvers += scala.scalajs.sbtplugin.ScalaJSPluginInternal.scalaJSReleasesResolver

  // or without Scala.js on the classpath
  resolvers += Resolver.url(&quot;scala-js-releases&quot;,
      url(&quot;http://dl.bintray.com/content/scala-js/scala-js-releases&quot;))(
      Resolver.ivyStylePatterns)
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Improved accuracy and parallelization for incremental optimizer&lt;/li&gt;
  &lt;li&gt;Allow to export protected members (&lt;code&gt;@JSExportAll&lt;/code&gt; still only exports public members).&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h4&gt;

&lt;p&gt;The following bugs have been fixed since 0.5.4:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/985&quot;&gt;#985&lt;/a&gt; JSExport doesn’t overload js.Any and Any correctly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/987&quot;&gt;#987&lt;/a&gt; Splitting an empty string should return an array with 1 element, not an empty array&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/997&quot;&gt;#997&lt;/a&gt; Honor in-regex flags in java.util.regex&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1011&quot;&gt;#1011&lt;/a&gt; IR printer doesn’t print -0.0 correctly&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/1020&quot;&gt;#1020&lt;/a&gt; Correct stack frame resolution of anonymous functions in Chrome/v8&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2014/09/18/announcing-scalajs-0.5.5/</link>
                <guid>http://www.scala-js.org/news/2014/09/18/announcing-scalajs-0.5.5</guid>
                <pubDate>2014-09-18T00:00:00+03:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.5.4</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.5.4!&lt;/p&gt;

&lt;p&gt;This release contains various bug fixes and enhancements to both the compiler and the sbt plugin.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.4 is backward binary compatible with older versions of the 0.5.x branch. However, it is &lt;em&gt;not&lt;/em&gt; forward binary compatible. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t need to re-publish libraries&lt;/li&gt;
  &lt;li&gt;You must upgrade to Scala.js 0.5.4 if any library you depend on uses Scala.js 0.5.4&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to re-publish a library, make sure to bump its version.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;upgrading-from-053-an-below&quot;&gt;Upgrading from 0.5.3 an below&lt;/h2&gt;

&lt;p&gt;Simply change the version number in &lt;code&gt;project/plugins.sbt&lt;/code&gt;, as usual.&lt;/p&gt;

&lt;p&gt;If you use &lt;a href=&quot;https://github.com/lihaoyi/utest&quot;&gt;uTest&lt;/a&gt;, you need to upgrade it to version 0.2.3 or later.
This is due to a binary incompatible change in the sbt plugin.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-the-054-release&quot;&gt;Improvements in the 0.5.4 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (see also the announcements for &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1&lt;/a&gt;, &lt;a href=&quot;/news/2014/07/09/announcing-scalajs-0.5.2/&quot;&gt;0.5.2&lt;/a&gt; and &lt;a href=&quot;/news/2014/07/30/announcing-scalajs-0.5.3/&quot;&gt;0.5.3&lt;/a&gt;).&lt;/p&gt;

&lt;h3 id=&quot;javascript-export-facilities&quot;&gt;JavaScript Export Facilities&lt;/h3&gt;

&lt;p&gt;A few improvements have been made to &lt;code&gt;@JSExport&lt;/code&gt;-related features, to export Scala.js APIs to JavaScript:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/export-to-javascript.html#JSExportNamed&quot;&gt;Export methods with named arguments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/export-to-javascript.html#JSExportAll&quot;&gt;Automatically export all public members of a class/object&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/export-to-javascript.html#constructor-params&quot;&gt;Export fields declared as constructor parameters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;phantomjs&quot;&gt;PhantomJS&lt;/h3&gt;

&lt;p&gt;The interface to the PhantomJS interpreter has been enhanced with two features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/sbt/js-envs.html#phantomjs-arguments&quot;&gt;Passing command-line arguments to PhantomJS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/sbt/js-envs.html#phantomjs-no-auto-terminate&quot;&gt;Configuring PhantomJS not to terminate automatically when the &lt;code&gt;main()&lt;/code&gt; method returns&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You can use &lt;code&gt;java.lang.System.exit(exitCode)&lt;/code&gt; to explicitly terminate the PhantomJS environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;conversions&quot;&gt;Conversions&lt;/h3&gt;

&lt;p&gt;The new object &lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.5.4/#scala.scalajs.js.JSConverters$&quot;&gt;JSConverters&lt;/a&gt; provides extension methods to convert between JavaScript collections and Scala collections (maps, sequences and option).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/doc/js-interoperability.html&quot;&gt;More information in the documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;source-maps-for-fulloptjs&quot;&gt;Source maps for fullOptJS&lt;/h3&gt;

&lt;p&gt;Source maps are now generated for &lt;code&gt;fullOptJS&lt;/code&gt; as well.&lt;/p&gt;

&lt;p&gt;To support this, we have changed the way we integrate the Google Closure Compiler.
Should you experience any regression, please file an issue, and use the following fallback to revert to the old mechanism (which will not generate source maps):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;directFullOptJS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;cross-versioning&quot;&gt;%%% Cross versioning&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;%%%&lt;/code&gt; operator used to build library dependencies for Scala.js has been enhanced.
It is now able to determine whether it is used inside a Scala.js project or a Scala/JVM project.
In the latter, it will be equivalent to &lt;code&gt;%%&lt;/code&gt;.
This allows to use &lt;code&gt;%%%&lt;/code&gt; consistently for cross-compiling projects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/doc/sbt/depending.html&quot;&gt;More information in the documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;auto-detect-whether-the-dom-is-required&quot;&gt;Auto-detect whether the DOM is required&lt;/h3&gt;

&lt;p&gt;The setting &lt;code&gt;requiresDOM&lt;/code&gt; will now default to &lt;code&gt;true&lt;/code&gt; if the special &lt;code&gt;RuntimeDOM&lt;/code&gt; dependency is listed in the (transitive) &lt;code&gt;jsDependencies&lt;/code&gt; of your project.
To specify that your library or program depends on the DOM, use the following setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sbtplugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RuntimeDOM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is still possible to override this behavior by explicitly setting &lt;code&gt;requiresDOM&lt;/code&gt;, as before.&lt;/p&gt;

&lt;h3 id=&quot;toolsjs&quot;&gt;Tools.js&lt;/h3&gt;

&lt;p&gt;Our tools API now cross-compiles for Scala/JVM and Scala.js.
It can therefore be used in Scala.js, for example to link and optimize Scala.js IR on the client.&lt;/p&gt;

&lt;h4 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h4&gt;

&lt;p&gt;The following bugs have been fixed since 0.5.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/897&quot;&gt;#897&lt;/a&gt; fastOptJS crash: Invalid lhs for Assign: This()&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/898&quot;&gt;#898&lt;/a&gt; PhantomJS polyfill doesn’t work&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/899&quot;&gt;#899&lt;/a&gt; Compiler should always unbox arguments to reflective calls&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/904&quot;&gt;#904&lt;/a&gt; Stack overflow in fast optimizer&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/906&quot;&gt;#906&lt;/a&gt; Assignment to exported var gives “Unhandled type class” warning&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/907&quot;&gt;#907&lt;/a&gt; fastOptJS crash: statements before Dictionary.delete() in exported functions&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/908&quot;&gt;#908&lt;/a&gt; Calling Dictionary.delete() with js.Object property throws RuntimeException&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/919&quot;&gt;#919&lt;/a&gt; sbt: Inspecting does not work with scalaJSSettings&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/920&quot;&gt;#920&lt;/a&gt; Return type lifting for JSExports fails on RefinedTypes&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/940&quot;&gt;#940&lt;/a&gt; Compiler crash on strange pattern match&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2014/08/29/announcing-scalajs-0.5.4/</link>
                <guid>http://www.scala-js.org/news/2014/08/29/announcing-scalajs-0.5.4</guid>
                <pubDate>2014-08-29T00:00:00+03:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.5.3</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.5.3!&lt;/p&gt;

&lt;p&gt;This release was focused mostly on &lt;em&gt;performance&lt;/em&gt;, bringing speedups from 1.3x to 3.3x to your applications.
In some cases, Scala.js becomes slightly &lt;em&gt;faster than JavaScript&lt;/em&gt;!
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.3 is backward binary compatible with older versions of the 0.5.x branch. However, it is &lt;em&gt;not&lt;/em&gt; forward binary compatible. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t need to re-publish libraries&lt;/li&gt;
  &lt;li&gt;You must upgrade to Scala.js 0.5.3 if any library you depend on uses Scala.js 0.5.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to re-publish a library, make sure to bump its version.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-the-053-release&quot;&gt;Improvements in the 0.5.3 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (see also the announcements for &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1&lt;/a&gt; and &lt;a href=&quot;/news/2014/07/09/announcing-scalajs-0.5.2/&quot;&gt;0.5.2&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;performance-improvements&quot;&gt;Performance improvements&lt;/h4&gt;

&lt;p&gt;Scala.js 0.5.3 is the first release to include an actual &lt;em&gt;optimizer&lt;/em&gt; specific to Scala.js.
This optimizer runs as part of the &lt;code&gt;fastOptJS&lt;/code&gt; task, and consistently brings speedups to all applications from 1.3x to 3.3x (&lt;a href=&quot;https://docs.google.com/document/d/17b18-oLJEIADixkSPR2mYof13ny1nGTtEVfsdiM7AGE/edit&quot;&gt;Rough benchmarks&lt;/a&gt;), along with code size reduction (15 % for the fastOpt version and 6 % for the fullOpt on our demo application) and less memory usage.
Because it runs at link time, the optimizer also applies to libraries you depend on that have been compiled with Scala.js 0.5.0 to 0.5.2 (although a few optimizations won’t be as effective).&lt;/p&gt;

&lt;p&gt;The optimizer is &lt;em&gt;incremental&lt;/em&gt; in the same sense as the incremental compilation of sbt: on each run, it will reoptimize only the parts of your application that need reoptimizing.
This means that it will run much faster starting from the second run within an sbt session (within 200 ms in typical scenarios).&lt;/p&gt;

&lt;p&gt;Should you experience any issue (e.g., your code broke), please report them &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.
You can also disable the optimizer with the sbt setting&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inliningMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sbtplugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InliningMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Off&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alternatively, you can force it to run in batch mode (non incremental) on every run with the following setting:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;ScalaJSKeys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inliningMode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scalajs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sbtplugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InliningMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Batch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;new-parts-of-the-java-standard-library&quot;&gt;New parts of the Java standard library&lt;/h4&gt;

&lt;p&gt;The following classes from the Java standard library are now available:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;java.net.URI&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;InputStream&lt;/code&gt;, &lt;code&gt;FilterInputStream&lt;/code&gt;, &lt;code&gt;DataInput&lt;/code&gt;, &lt;code&gt;ByteArrayInputStream&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;scala.scalajs.js.typearray.ArrayBufferInputStream&lt;/code&gt;, an implementation of &lt;code&gt;InputStream&lt;/code&gt; reading a JavaScript &lt;code&gt;TypedArray&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These classes are automatically available in all your Scala.js projects.&lt;/p&gt;

&lt;p&gt;Other, additional Java classes are also available in the &lt;code&gt;javalib-ex&lt;/code&gt; package.
These classes require some features of ECMAScript 6 to be implemented by the JavaScript engine, and must therefore be enabled explicitly with this dependency:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;libraryDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.scala-lang.modules.scalajs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;scalajs-javalib-ex&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scalaJSVersion&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Currently, the only additional class is &lt;code&gt;java.io.DataInputStream&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&quot;javascript-libraries-in-nodejs&quot;&gt;JavaScript libraries in Node.js&lt;/h4&gt;

&lt;p&gt;Until 0.5.2, the Node.js runner had trouble running JavaScript libraries that were “too” smart about being run as a Node.js module (bug &lt;a href=&quot;https://github.com/scala-js/scala-js/issues/706&quot;&gt;#706&lt;/a&gt;).
To fix this issue, the &lt;code&gt;jsDependencies&lt;/code&gt; mechanism has been augmented with an optional &lt;code&gt;commonJSName&lt;/code&gt; directive, to be used as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;jsDependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.webjars&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mustachejs&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.8.2&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mustache.js&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commonJSName&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Mustache&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;commonJSName&lt;/code&gt; directive should be set to the name used by the library to export itself when run in a CommonJS environment (such as Node.js).
You can typically figure that out from the library’s documentation.&lt;/p&gt;

&lt;h4 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h4&gt;

&lt;p&gt;The following bugs have been fixed in 0.5.3:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/820&quot;&gt;#820&lt;/a&gt; Generated html for phantomjs on windows fails to load scripts&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/843&quot;&gt;#843&lt;/a&gt; &lt;code&gt;js.Array.toList&lt;/code&gt; (and others) fails with a &lt;code&gt;ClassCastException&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/865&quot;&gt;#865&lt;/a&gt; PhantomJS doesn’t use existing shell environment&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/872&quot;&gt;#872&lt;/a&gt; &lt;code&gt;string.split(&#39;\n&#39;)&lt;/code&gt; does not work&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;changes-to-the-ir&quot;&gt;Changes to the IR&lt;/h4&gt;

&lt;p&gt;Some (more) minor changes have been made to the IR to better accommodate the optimizer.
This is the reason for the lack of forward binary compatibility in this release.&lt;/p&gt;
</description>
                <link>http://www.scala-js.org/news/2014/07/30/announcing-scalajs-0.5.3/</link>
                <guid>http://www.scala-js.org/news/2014/07/30/announcing-scalajs-0.5.3</guid>
                <pubDate>2014-07-30T00:00:00+03:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.5.2</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.5.2!
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Scala.js 0.5.2 is backward binary compatible with older versions of the 0.5.x branch. However, it is &lt;em&gt;not&lt;/em&gt; forward binary compatible. This means:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You don’t need to re-publish libraries&lt;/li&gt;
  &lt;li&gt;You must upgrade to Scala.js 0.5.2 if any library you depend on uses Scala.js 0.5.2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to re-publish a library, make sure to bump its version.&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-the-052-release&quot;&gt;Improvements in the 0.5.2 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt; (and maybe the &lt;a href=&quot;/news/2014/06/30/announcing-scalajs-0.5.1/&quot;&gt;0.5.1 announcement&lt;/a&gt;).&lt;/p&gt;

&lt;h4 id=&quot;typedarrays&quot;&gt;TypedArrays&lt;/h4&gt;

&lt;p&gt;The new package &lt;code&gt;scala.scalajs.js.typedarray&lt;/code&gt; contains facade types
for JavaScript TypedArrays. It introduces compiler support to convert
&lt;code&gt;scala.Array&lt;/code&gt;s to their TypedArray equivalent and vice versa.&lt;/p&gt;

&lt;p&gt;Note that TypedArrays are &lt;strong&gt;not&lt;/strong&gt; part of the ECMAScript 5
specification. You need to make sure your target platform supports
TypedArrays in addition to ECMAScript 5, if you decide to use them. Scala.js’
&lt;a href=&quot;https://github.com/scala-js/scala-js/tree/v0.5.2/test-suite/src/test/scala/scala/scalajs/test/typedarray&quot;&gt;TypedArray test suite&lt;/a&gt;
covers the full typed API and should be sufficient to verify whether a
given JavaScript runtime supports TypedArrays.&lt;/p&gt;

&lt;h4 id=&quot;bugfixes&quot;&gt;Bugfixes&lt;/h4&gt;

&lt;p&gt;The following bugs have been fixed in 0.5.2:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/789&quot;&gt;#789&lt;/a&gt; &lt;code&gt;fastOptStage::run&lt;/code&gt; fails with Node.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/791&quot;&gt;#791&lt;/a&gt; Default arguments in the constructor of facade classes fail if the companion object doesn’t extend &lt;code&gt;js.Any&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/796&quot;&gt;#796&lt;/a&gt; Extending &lt;code&gt;js.Any&lt;/code&gt; directly gives strange error messages&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;changes-to-the-ir&quot;&gt;Changes to the IR&lt;/h4&gt;

&lt;p&gt;Some minor changes have been made to the IR to better accommodate the incremental optimizer in the pipeline for 0.5.3. This is the reason for the lack of forward binary compatibility.&lt;/p&gt;
</description>
                <link>http://www.scala-js.org/news/2014/07/09/announcing-scalajs-0.5.2/</link>
                <guid>http://www.scala-js.org/news/2014/07/09/announcing-scalajs-0.5.2</guid>
                <pubDate>2014-07-09T00:00:00+03:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.5.1</title>
                <description>&lt;p&gt;We are excited to announce the release of Scala.js 0.5.1!&lt;/p&gt;

&lt;p&gt;This version features bug fixes and improvements while remaining binary compatible with Scala.js 0.5.0. Therefore,
Scala.js libraries may, but need not be republished with Scala.js 0.5.1.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Please report any issues &lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;improvements-in-the-051-release&quot;&gt;Improvements in the 0.5.1 release&lt;/h2&gt;

&lt;p&gt;For changes introduced in 0.5.0, how to upgrade, getting started etc. have a look at the &lt;a href=&quot;/news/2014/06/13/announcing-scalajs-0.5.0/&quot;&gt;0.5.0 announcement&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;additions-to-the-java-library&quot;&gt;Additions to the Java library&lt;/h4&gt;

&lt;p&gt;The following two are now implemented according to spec:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;java.util.Date&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;java.util.Random&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;wrappers-for-javascript-arrays-and-dictionaries&quot;&gt;Wrappers for JavaScript Arrays and Dictionaries&lt;/h4&gt;

&lt;p&gt;Thanks to &lt;code&gt;js.WrappedArray&lt;/code&gt; and &lt;code&gt;js.WrappedDictionary&lt;/code&gt; (and some implicit conversions), &lt;code&gt;js.Array&lt;/code&gt; and &lt;code&gt;js.Dictionary&lt;/code&gt; can now be passed to Scala code that expects &lt;code&gt;mutable.Seq&lt;/code&gt; and &lt;code&gt;mutable.Map&lt;/code&gt; respectively:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setHead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mutable.Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setHead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Further, this allows to call methods defined on &lt;code&gt;Map&lt;/code&gt; on &lt;code&gt;js.Dictionary&lt;/code&gt; (&lt;code&gt;foreach&lt;/code&gt;, &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc.)&lt;/p&gt;

&lt;h4 id=&quot;filter-jsdependencies-when-executing-javascript-code&quot;&gt;Filter &lt;code&gt;jsDependencies&lt;/code&gt; when executing JavaScript code&lt;/h4&gt;

&lt;p&gt;The new sbt setting &lt;code&gt;jsDependencyFilter&lt;/code&gt; can be used to modify the dependencies used when running/testing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;jsDependencyFilter := (_.filter(_.resourceName != &quot;jquery.js&quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above would prevent “jquery.js” from being included by the sbt runners. See &lt;a href=&quot;http://www.scala-js.org/api/scalajs-tools/0.5.1/#scala.scalajs.tools.jsdep.FlatJSDependency&quot;&gt;FlatJSDependency&lt;/a&gt; for fields that you can use.&lt;/p&gt;

&lt;h4 id=&quot;ordered-testing-output&quot;&gt;Ordered testing output&lt;/h4&gt;

&lt;p&gt;When testing in the &lt;code&gt;fastOptStage&lt;/code&gt; or the &lt;code&gt;fullOptStage&lt;/code&gt;, test output sometimes appeared interleaved. This has been fixed this release.&lt;/p&gt;

&lt;h2 id=&quot;contributors&quot;&gt;Contributors&lt;/h2&gt;

&lt;p&gt;Thanks to all the code contributors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/sjrd/&quot;&gt;Sébastien Doeraene&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gzm0/&quot;&gt;Tobias Schlatter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/alexander-myltsev&quot;&gt;Alexander Myltsev&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mseddon&quot;&gt;Matt Seddon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
                <link>http://www.scala-js.org/news/2014/06/30/announcing-scalajs-0.5.1/</link>
                <guid>http://www.scala-js.org/news/2014/06/30/announcing-scalajs-0.5.1</guid>
                <pubDate>2014-06-30T00:00:00+03:00</pubDate>
        </item>

        <item>
                <title>Announcing Scala.js 0.5.0</title>
                <description>&lt;p&gt;We are very excited to announce the final release of Scala.js 0.5.0!
This version is a major milestone towards the maturity of Scala.js, probably
the most important release since its very first prototype.&lt;/p&gt;

&lt;p&gt;Scala.js is a compiler from Scala to JavaScript. It allows you to write your
entire web application in Scala and simply compile to JavaScript!
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/doc/tutorial.html&quot;&gt;Tutorial&lt;/a&gt;,
for newcomers to Scala.js&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./#upgrading&quot;&gt;Upgrading from Scala.js 0.4.x&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Try Scala.js right in your browser with
&lt;a href=&quot;http://www.scala-js-fiddle.com/&quot;&gt;Scala.jsFiddle&lt;/a&gt;
(currently using Scala.js 0.4.4)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;new-features-in-the-05x-series&quot;&gt;New features in the 0.5.x series&lt;/h2&gt;

&lt;p&gt;Scala.js 0.5.0 introduces new features, improvements and bug fixes in many
areas, ranging from compiler correctness to usability to emitted code size and
speed.&lt;/p&gt;

&lt;h3 id=&quot;language-changes&quot;&gt;Language changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Scala semantics for integer and character types (i.e., wrapping semantics)
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, and &lt;code&gt;Char&lt;/code&gt; now behave the same way as on the
JVM with respect to wrapping around their range, e.g., &lt;code&gt;Int&lt;/code&gt; is truly
a signed 32-bit integer.&lt;/li&gt;
      &lt;li&gt;Exception: division by 0 is still unspecified.&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Long&lt;/code&gt; continues to behave as a proper signed 64-bit integer, as it
did for a long time&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Float&lt;/code&gt; still behaves just like &lt;code&gt;Double&lt;/code&gt;, as it always did.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/doc/semantics.html&quot;&gt;Full details&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Improved interoperability with JavaScript
    &lt;ul&gt;
      &lt;li&gt;Normal Scala primitive types can be used instead of &lt;code&gt;js.Number&lt;/code&gt;,
&lt;code&gt;js.Boolean&lt;/code&gt;, &lt;code&gt;js.String&lt;/code&gt; and &lt;code&gt;js.Undefined&lt;/code&gt; for interoperability with
JavaScript, because they are guaranteed to always be represented as
primitive JavaScript values (&lt;code&gt;Char&lt;/code&gt; and &lt;code&gt;Long&lt;/code&gt; are still opaque to
JavaScript, because they do not have a corresponding type in JavaScript).
See &lt;a href=&quot;/doc/js-interoperability.html#type-correspondance&quot;&gt;the documentation on type correspondance&lt;/a&gt;
for more details.&lt;/li&gt;
      &lt;li&gt;Introduced the type &lt;code&gt;js.UndefOr[+A]&lt;/code&gt;
(&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.5.0/#scala.scalajs.js.UndefOr&quot;&gt;API&lt;/a&gt;),
which represents a value of type &lt;code&gt;A&lt;/code&gt; &lt;em&gt;or&lt;/em&gt; &lt;code&gt;undefined&lt;/code&gt;, and offers an
&lt;code&gt;Option&lt;/code&gt;-like interface where &lt;code&gt;undefined&lt;/code&gt; takes the role of &lt;code&gt;None&lt;/code&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;improvements-to-the-generated-code&quot;&gt;Improvements to the generated code&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Smaller. For a non-trivial application, we have
    &lt;ul&gt;
      &lt;li&gt;~1.3 MB for fast-optimized code (for iterative development)&lt;/li&gt;
      &lt;li&gt;~180 KB for full-optimized code (for production)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Faster.
    &lt;ul&gt;
      &lt;li&gt;Values of primitive types, excluding &lt;code&gt;Char&lt;/code&gt;, are not boxed anymore when
assigned to &lt;code&gt;Any&lt;/code&gt; or generic types&lt;/li&gt;
      &lt;li&gt;We don’t have precise benchmarks, but we received reports of noticeable
improvements.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sbt-plugin-changes&quot;&gt;sbt plugin changes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;preoptimizeJS&lt;/code&gt; and &lt;code&gt;optimizeJS&lt;/code&gt; have been renamed &lt;code&gt;fastOptJS&lt;/code&gt; and
&lt;code&gt;fullOptJS&lt;/code&gt;, respectively, to better represent their intent.
&lt;code&gt;fastOptJS&lt;/code&gt; is &lt;em&gt;really&lt;/em&gt; fast (less than 1/2 second in addition to the
normal &lt;code&gt;compile&lt;/code&gt; of scalac), and is now the recommended default for
iterative development.&lt;/li&gt;
  &lt;li&gt;Running and testing with &lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; and
&lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;With &lt;code&gt;fastOptStage::run&lt;/code&gt; or &lt;code&gt;fastOptStage::test&lt;/code&gt;, run your code using
a native-speed interpreter on the result of fast-optimization.&lt;/li&gt;
      &lt;li&gt;By default, Node.js is used, unless the setting &lt;code&gt;requiresDOM := true&lt;/code&gt;
is set, in which case PhantomJS is used&lt;/li&gt;
      &lt;li&gt;Replace &lt;code&gt;fastOptStage&lt;/code&gt; by &lt;code&gt;fullOptStage&lt;/code&gt; to execute the full-optimized
version of your code.&lt;/li&gt;
      &lt;li&gt;Node.js and/or PhantomJS must be installed separately for this to work.
The basic &lt;code&gt;run&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; still use Rhino and work out-of-the-box.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Auto-discovery of objects extending the &lt;code&gt;js.JSApp&lt;/code&gt; trait
(&lt;a href=&quot;http://www.scala-js.org/api/scalajs-library/0.5.0/#scala.scalajs.js.JSApp&quot;&gt;API&lt;/a&gt;)
    &lt;ul&gt;
      &lt;li&gt;Can be run directly with the &lt;code&gt;run&lt;/code&gt; task&lt;/li&gt;
      &lt;li&gt;With &lt;code&gt;persistLauncher := true&lt;/code&gt;, sbt will emit a tiny JavaScript entry
point that calls the &lt;code&gt;main&lt;/code&gt; method.&lt;/li&gt;
      &lt;li&gt;To support this the best we could, we have dropped auto-discovery of
objects defining a &lt;code&gt;def main(args: Array[String])&lt;/code&gt; method.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;/doc/tutorial.html#optimizing&quot;&gt;More information in the tutorial&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;binary-compatibility-and-dependency-management&quot;&gt;Binary compatibility and dependency management&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Backward binary compatibility across minor releases
    &lt;ul&gt;
      &lt;li&gt;Similarly to Scala, except it is only &lt;em&gt;backward&lt;/em&gt;.&lt;/li&gt;
      &lt;li&gt;For example, libraries compiled with Scala.js 0.5.0 will be usable with
Scala.js 0.5.1, but not (necessarily) the other way around.&lt;/li&gt;
      &lt;li&gt;The sbt plugin encodes the Scala.js binary version in artifact names
in addition to the Scala binary version.
For example, the artifacts for a library “foo” compiled with
Scala 2.11.1 and Scala.js 0.5.0 will be named &lt;code&gt;foo_sjs0.5_2.11&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;To depend on the doubly-cross compiled version of a Scala.js library,
use &lt;code&gt;%%%&lt;/code&gt; instead of &lt;code&gt;%%&lt;/code&gt; in your &lt;code&gt;libraryDependencies&lt;/code&gt;. For example,
&lt;code&gt;&quot;org.scala-lang.modules.scalajs&quot; %%% &quot;scalajs-dom&quot; % &quot;0.6&quot;&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Managing your dependencies on JavaScript libraries
    &lt;ul&gt;
      &lt;li&gt;In addition to depending on other Scala.js libraries, Scala.js now
supports depending on JavaScript libraries through
&lt;a href=&quot;http://www.webjars.org/&quot;&gt;WebJars&lt;/a&gt;, that will be resolved automatically.&lt;/li&gt;
      &lt;li&gt;You can ask the sbt plugin to package all your JavaScript dependencies
in a single &lt;code&gt;.js&lt;/code&gt; file if you so wish, but this is not mandatory.&lt;/li&gt;
      &lt;li&gt;See the &lt;a href=&quot;/doc/tutorial.html#using-jquery&quot;&gt;tutorial&lt;/a&gt; for more information.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;command-line-interface-cli&quot;&gt;Command line interface (CLI)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Following a request by some of our users, we added a
&lt;a href=&quot;/downloads.html&quot;&gt;stand-alone distribution&lt;/a&gt; that allows to
use Scala.js without sbt (but with Scala).
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;scalajsc&lt;/code&gt; is a front-end to &lt;code&gt;scalac&lt;/code&gt; setting up correctly the Scala.js
compiler plugin and library on the classpath&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;scalajsld&lt;/code&gt; performs linking and optimizations (the equivalent of
&lt;code&gt;fastOptJS&lt;/code&gt; and &lt;code&gt;fullOptJS&lt;/code&gt; in sbt)&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;scalajsp&lt;/code&gt; prints the content of &lt;code&gt;.sjsir&lt;/code&gt; files (the intermediate files
produced by &lt;code&gt;scalajsc&lt;/code&gt; and consumed by &lt;code&gt;scalajsld&lt;/code&gt;) in a human-readable
form.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-nameupgradinga-upgrading-from-scalajs-04x&quot;&gt;&lt;a name=&quot;upgrading&quot;&gt;&lt;/a&gt; Upgrading from Scala.js 0.4.x&lt;/h2&gt;

&lt;p&gt;Source code written for Scala.js 0.4.x should mostly compile without change
for Scala.js 0.5.0. Due to the ability to type JavaScript APIs more precisely,
in particular using &lt;code&gt;scala.Int&lt;/code&gt;s and &lt;code&gt;js.UndefOr&lt;/code&gt;, it is possible that code
interacting with, for example, the statically typed DOM API will need some
minor changes.&lt;/p&gt;

&lt;p&gt;However, build files and HTML files surrounding Scala.js source code will need
important adaptations. The easiest is to reproduce the changes of
&lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/45de74a6a029eb9d11579f667a622a8393a7b143&quot;&gt;this commit&lt;/a&gt;
of the bootstrapping skeleton.&lt;/p&gt;

&lt;p&gt;You may also wish to take advantage of the new &lt;code&gt;persistLauncher&lt;/code&gt; setting to
automatically generate a launcher script based on the discovered &lt;code&gt;JSApp&lt;/code&gt;, in
which case you can also apply the changes of
&lt;a href=&quot;https://github.com/sjrd/scala-js-example-app/commit/b4cf28f7e6d5447fde248369a6f62d718c3f8aca&quot;&gt;this other commit&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;known-issues&quot;&gt;Known issues&lt;/h2&gt;

&lt;p&gt;This release suffers from a few known issues, which we decided to postpone to
a later (binary-compatible) release. The most important ones are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/727&quot;&gt;#727&lt;/a&gt; -
Source mapping does not work with our Rhino interpreter (with &lt;code&gt;run&lt;/code&gt; and
&lt;code&gt;test&lt;/code&gt;)
    &lt;ul&gt;
      &lt;li&gt;Prefer &lt;code&gt;fastOptStage::run&lt;/code&gt; and &lt;code&gt;fastOptStage::test&lt;/code&gt; to run with Node.js:
it is faster and you will get stack traces from your &lt;code&gt;.scala&lt;/code&gt; source
files.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/608&quot;&gt;#608&lt;/a&gt; -
Ordering issues with the test reporter, which can mix results of tests
ran in parallel.
    &lt;ul&gt;
      &lt;li&gt;When a test fails, consider using &lt;code&gt;fastOptStage::testQuick&lt;/code&gt; or
&lt;code&gt;fastOptStage::testOnly&lt;/code&gt; to rerun only the failing test, which will
mitigate this issue.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scala-js/scala-js/issues/706&quot;&gt;#706&lt;/a&gt; -
JS libraries that act “too” smartly in Node.js.
    &lt;ul&gt;
      &lt;li&gt;Work around: force usage of PhantomJS instead of Node.js, on which this
issue does not seem to manifest.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find the complete list of known issues (and report new issues)
&lt;a href=&quot;https://github.com/scala-js/scala-js/issues&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
                <link>http://www.scala-js.org/news/2014/06/13/announcing-scalajs-0.5.0/</link>
                <guid>http://www.scala-js.org/news/2014/06/13/announcing-scalajs-0.5.0</guid>
                <pubDate>2014-06-13T00:00:00+03:00</pubDate>
        </item>


</channel>
</rss>
